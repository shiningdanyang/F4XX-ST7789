
F411-ST7789Vi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004204  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008dd0  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d16c  0800d16c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800d16c  0800d16c  0001d16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d174  0800d174  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d174  0800d174  0001d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d178  0800d178  0001d178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800d17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d6c  20000028  0800d1a4  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d94  0800d1a4  00020d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bda  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001abb  00000000  00000000  00028c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002a730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e80  00000000  00000000  0002af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cdd  00000000  00000000  00040dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bc2  00000000  00000000  0004aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000005f8  00000000  00000000  000d1667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002168  00000000  00000000  000d1c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d3dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004384 	.word	0x08004384

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08004384 	.word	0x08004384

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_frsub>:
 80009b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b8:	e002      	b.n	80009c0 <__addsf3>
 80009ba:	bf00      	nop

080009bc <__aeabi_fsub>:
 80009bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c0 <__addsf3>:
 80009c0:	0042      	lsls	r2, r0, #1
 80009c2:	bf1f      	itttt	ne
 80009c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c8:	ea92 0f03 	teqne	r2, r3
 80009cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d4:	d06a      	beq.n	8000aac <__addsf3+0xec>
 80009d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009de:	bfc1      	itttt	gt
 80009e0:	18d2      	addgt	r2, r2, r3
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	4048      	eorgt	r0, r1
 80009e6:	4041      	eorgt	r1, r0
 80009e8:	bfb8      	it	lt
 80009ea:	425b      	neglt	r3, r3
 80009ec:	2b19      	cmp	r3, #25
 80009ee:	bf88      	it	hi
 80009f0:	4770      	bxhi	lr
 80009f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4240      	negne	r0, r0
 8000a02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a0e:	bf18      	it	ne
 8000a10:	4249      	negne	r1, r1
 8000a12:	ea92 0f03 	teq	r2, r3
 8000a16:	d03f      	beq.n	8000a98 <__addsf3+0xd8>
 8000a18:	f1a2 0201 	sub.w	r2, r2, #1
 8000a1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a20:	eb10 000c 	adds.w	r0, r0, ip
 8000a24:	f1c3 0320 	rsb	r3, r3, #32
 8000a28:	fa01 f103 	lsl.w	r1, r1, r3
 8000a2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a30:	d502      	bpl.n	8000a38 <__addsf3+0x78>
 8000a32:	4249      	negs	r1, r1
 8000a34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a3c:	d313      	bcc.n	8000a66 <__addsf3+0xa6>
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a42:	d306      	bcc.n	8000a52 <__addsf3+0x92>
 8000a44:	0840      	lsrs	r0, r0, #1
 8000a46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a4a:	f102 0201 	add.w	r2, r2, #1
 8000a4e:	2afe      	cmp	r2, #254	; 0xfe
 8000a50:	d251      	bcs.n	8000af6 <__addsf3+0x136>
 8000a52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5a:	bf08      	it	eq
 8000a5c:	f020 0001 	biceq.w	r0, r0, #1
 8000a60:	ea40 0003 	orr.w	r0, r0, r3
 8000a64:	4770      	bx	lr
 8000a66:	0049      	lsls	r1, r1, #1
 8000a68:	eb40 0000 	adc.w	r0, r0, r0
 8000a6c:	3a01      	subs	r2, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a74:	d2ed      	bcs.n	8000a52 <__addsf3+0x92>
 8000a76:	fab0 fc80 	clz	ip, r0
 8000a7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a86:	bfaa      	itet	ge
 8000a88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a8c:	4252      	neglt	r2, r2
 8000a8e:	4318      	orrge	r0, r3
 8000a90:	bfbc      	itt	lt
 8000a92:	40d0      	lsrlt	r0, r2
 8000a94:	4318      	orrlt	r0, r3
 8000a96:	4770      	bx	lr
 8000a98:	f092 0f00 	teq	r2, #0
 8000a9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa0:	bf06      	itte	eq
 8000aa2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aa6:	3201      	addeq	r2, #1
 8000aa8:	3b01      	subne	r3, #1
 8000aaa:	e7b5      	b.n	8000a18 <__addsf3+0x58>
 8000aac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aba:	d021      	beq.n	8000b00 <__addsf3+0x140>
 8000abc:	ea92 0f03 	teq	r2, r3
 8000ac0:	d004      	beq.n	8000acc <__addsf3+0x10c>
 8000ac2:	f092 0f00 	teq	r2, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	4608      	moveq	r0, r1
 8000aca:	4770      	bx	lr
 8000acc:	ea90 0f01 	teq	r0, r1
 8000ad0:	bf1c      	itt	ne
 8000ad2:	2000      	movne	r0, #0
 8000ad4:	4770      	bxne	lr
 8000ad6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ada:	d104      	bne.n	8000ae6 <__addsf3+0x126>
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	bf28      	it	cs
 8000ae0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae4:	4770      	bx	lr
 8000ae6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aea:	bf3c      	itt	cc
 8000aec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bxcc	lr
 8000af2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	4770      	bx	lr
 8000b00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b04:	bf16      	itet	ne
 8000b06:	4608      	movne	r0, r1
 8000b08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b0c:	4601      	movne	r1, r0
 8000b0e:	0242      	lsls	r2, r0, #9
 8000b10:	bf06      	itte	eq
 8000b12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b16:	ea90 0f01 	teqeq	r0, r1
 8000b1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_ui2f>:
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e004      	b.n	8000b30 <__aeabi_i2f+0x8>
 8000b26:	bf00      	nop

08000b28 <__aeabi_i2f>:
 8000b28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b2c:	bf48      	it	mi
 8000b2e:	4240      	negmi	r0, r0
 8000b30:	ea5f 0c00 	movs.w	ip, r0
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	e01c      	b.n	8000b7e <__aeabi_l2f+0x2a>

08000b44 <__aeabi_ul2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	e00a      	b.n	8000b68 <__aeabi_l2f+0x14>
 8000b52:	bf00      	nop

08000b54 <__aeabi_l2f>:
 8000b54:	ea50 0201 	orrs.w	r2, r0, r1
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__aeabi_l2f+0x14>
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	ea5f 0c01 	movs.w	ip, r1
 8000b6c:	bf02      	ittt	eq
 8000b6e:	4684      	moveq	ip, r0
 8000b70:	4601      	moveq	r1, r0
 8000b72:	2000      	moveq	r0, #0
 8000b74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b78:	bf08      	it	eq
 8000b7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b82:	fabc f28c 	clz	r2, ip
 8000b86:	3a08      	subs	r2, #8
 8000b88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b8c:	db10      	blt.n	8000bb0 <__aeabi_l2f+0x5c>
 8000b8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b92:	4463      	add	r3, ip
 8000b94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f102 0220 	add.w	r2, r2, #32
 8000bb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb8:	f1c2 0220 	rsb	r2, r2, #32
 8000bbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc4:	eb43 0002 	adc.w	r0, r3, r2
 8000bc8:	bf08      	it	eq
 8000bca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b970 	b.w	8000ec8 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9e08      	ldr	r6, [sp, #32]
 8000c06:	460d      	mov	r5, r1
 8000c08:	4604      	mov	r4, r0
 8000c0a:	460f      	mov	r7, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d14a      	bne.n	8000ca6 <__udivmoddi4+0xa6>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4694      	mov	ip, r2
 8000c14:	d965      	bls.n	8000ce2 <__udivmoddi4+0xe2>
 8000c16:	fab2 f382 	clz	r3, r2
 8000c1a:	b143      	cbz	r3, 8000c2e <__udivmoddi4+0x2e>
 8000c1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c20:	f1c3 0220 	rsb	r2, r3, #32
 8000c24:	409f      	lsls	r7, r3
 8000c26:	fa20 f202 	lsr.w	r2, r0, r2
 8000c2a:	4317      	orrs	r7, r2
 8000c2c:	409c      	lsls	r4, r3
 8000c2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c32:	fa1f f58c 	uxth.w	r5, ip
 8000c36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c3a:	0c22      	lsrs	r2, r4, #16
 8000c3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c44:	fb01 f005 	mul.w	r0, r1, r5
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x62>
 8000c4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c50:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c54:	f080 811c 	bcs.w	8000e90 <__udivmoddi4+0x290>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f240 8119 	bls.w	8000e90 <__udivmoddi4+0x290>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4462      	add	r2, ip
 8000c62:	1a12      	subs	r2, r2, r0
 8000c64:	b2a4      	uxth	r4, r4
 8000c66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c72:	fb00 f505 	mul.w	r5, r0, r5
 8000c76:	42a5      	cmp	r5, r4
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x90>
 8000c7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c82:	f080 8107 	bcs.w	8000e94 <__udivmoddi4+0x294>
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	f240 8104 	bls.w	8000e94 <__udivmoddi4+0x294>
 8000c8c:	4464      	add	r4, ip
 8000c8e:	3802      	subs	r0, #2
 8000c90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c94:	1b64      	subs	r4, r4, r5
 8000c96:	2100      	movs	r1, #0
 8000c98:	b11e      	cbz	r6, 8000ca2 <__udivmoddi4+0xa2>
 8000c9a:	40dc      	lsrs	r4, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0xbc>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	f000 80ed 	beq.w	8000e8a <__udivmoddi4+0x28a>
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	fab3 f183 	clz	r1, r3
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	d149      	bne.n	8000d58 <__udivmoddi4+0x158>
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	d302      	bcc.n	8000cce <__udivmoddi4+0xce>
 8000cc8:	4282      	cmp	r2, r0
 8000cca:	f200 80f8 	bhi.w	8000ebe <__udivmoddi4+0x2be>
 8000cce:	1a84      	subs	r4, r0, r2
 8000cd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	4617      	mov	r7, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d0e2      	beq.n	8000ca2 <__udivmoddi4+0xa2>
 8000cdc:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce0:	e7df      	b.n	8000ca2 <__udivmoddi4+0xa2>
 8000ce2:	b902      	cbnz	r2, 8000ce6 <__udivmoddi4+0xe6>
 8000ce4:	deff      	udf	#255	; 0xff
 8000ce6:	fab2 f382 	clz	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 8090 	bne.w	8000e10 <__udivmoddi4+0x210>
 8000cf0:	1a8a      	subs	r2, r1, r2
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d00:	fb07 2015 	mls	r0, r7, r5, r2
 8000d04:	0c22      	lsrs	r2, r4, #16
 8000d06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d0a:	fb0e f005 	mul.w	r0, lr, r5
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x124>
 8000d12:	eb1c 0202 	adds.w	r2, ip, r2
 8000d16:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x122>
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2b8>
 8000d22:	4645      	mov	r5, r8
 8000d24:	1a12      	subs	r2, r2, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x14e>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x14c>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2c2>
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d56:	e79f      	b.n	8000c98 <__udivmoddi4+0x98>
 8000d58:	f1c1 0720 	rsb	r7, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa05 f401 	lsl.w	r4, r5, r1
 8000d6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d6e:	40fd      	lsrs	r5, r7
 8000d70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d82:	0c1c      	lsrs	r4, r3, #16
 8000d84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d88:	fb08 f50e 	mul.w	r5, r8, lr
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f001 	lsl.w	r0, r0, r1
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b0>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2b4>
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2b4>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4464      	add	r4, ip
 8000db0:	1b64      	subs	r4, r4, r5
 8000db2:	b29d      	uxth	r5, r3
 8000db4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dbc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1da>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2ac>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2ac>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	4464      	add	r4, ip
 8000dda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dde:	fba3 9502 	umull	r9, r5, r3, r2
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	42ac      	cmp	r4, r5
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46ae      	mov	lr, r5
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x29c>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x298>
 8000df0:	b156      	cbz	r6, 8000e08 <__udivmoddi4+0x208>
 8000df2:	ebb0 0208 	subs.w	r2, r0, r8
 8000df6:	eb64 040e 	sbc.w	r4, r4, lr
 8000dfa:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfe:	40ca      	lsrs	r2, r1
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	4317      	orrs	r7, r2
 8000e04:	e9c6 7400 	strd	r7, r4, [r6]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	f1c3 0120 	rsb	r1, r3, #32
 8000e14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e18:	fa20 f201 	lsr.w	r2, r0, r1
 8000e1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e20:	409d      	lsls	r5, r3
 8000e22:	432a      	orrs	r2, r5
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e30:	fb07 1510 	mls	r5, r7, r0, r1
 8000e34:	0c11      	lsrs	r1, r2, #16
 8000e36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e3e:	428d      	cmp	r5, r1
 8000e40:	fa04 f403 	lsl.w	r4, r4, r3
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x258>
 8000e46:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e50:	428d      	cmp	r5, r1
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	1b49      	subs	r1, r1, r5
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e60:	fb07 1115 	mls	r1, r7, r5, r1
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	fb05 f10e 	mul.w	r1, r5, lr
 8000e6c:	4291      	cmp	r1, r2
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x282>
 8000e70:	eb1c 0202 	adds.w	r2, ip, r2
 8000e74:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e7a:	4291      	cmp	r1, r2
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e7e:	3d02      	subs	r5, #2
 8000e80:	4462      	add	r2, ip
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0xfc>
 8000e8a:	4631      	mov	r1, r6
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xa2>
 8000e90:	4639      	mov	r1, r7
 8000e92:	e6e6      	b.n	8000c62 <__udivmoddi4+0x62>
 8000e94:	4610      	mov	r0, r2
 8000e96:	e6fb      	b.n	8000c90 <__udivmoddi4+0x90>
 8000e98:	4548      	cmp	r0, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f0>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f0>
 8000ea8:	4645      	mov	r5, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x282>
 8000eac:	462b      	mov	r3, r5
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1da>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x258>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b0>
 8000eb8:	3d02      	subs	r5, #2
 8000eba:	4462      	add	r2, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x124>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e70a      	b.n	8000cd8 <__udivmoddi4+0xd8>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x14e>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <DrawBox>:
    .pc_TextDefault = "No internet!"                       //33 Connect failed Label
  },
};

void DrawBox(const ST_LCD_BOX_INFO ast_Box)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ST7789_DrawFilledRectangle(ast_Box.int_X, ast_Box.int_Y, ast_Box.int_W, ast_Box.int_H, ast_Box.u1_Color);
 8000ed8:	88b8      	ldrh	r0, [r7, #4]
 8000eda:	88f9      	ldrh	r1, [r7, #6]
 8000edc:	893a      	ldrh	r2, [r7, #8]
 8000ede:	897c      	ldrh	r4, [r7, #10]
 8000ee0:	89bb      	ldrh	r3, [r7, #12]
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	4623      	mov	r3, r4
 8000ee6:	f001 f9be 	bl	8002266 <ST7789_DrawFilledRectangle>
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}

08000ef2 <DrawText>:

void DrawText(const ST_LCD_TEXT_INFO ast_Text, const char* apu1_Char)
{
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	f107 0410 	add.w	r4, r7, #16
 8000efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//  const char * apu1_Dest;
//  DrawBox(ast_Text.st_Box);
  if (apu1_Char == NULL)
 8000f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10b      	bne.n	8000f20 <DrawText+0x2e>
  {
    // tft.print(ast_Text.pc_TextDefault);
    // ST7789_WriteString(ast_Text.pc_TextDefault, ast_Text.int_X, ast_Text.int_Y, COLOR_BLACK, ast_Text.u1_Color, ast_Text.pcs_size);
    ST7789_WriteString(ast_Text.int_X, ast_Text.int_Y, ast_Text.pc_TextDefault, ast_Text.pc_Font, WHITE, BLACK);
 8000f08:	8b78      	ldrh	r0, [r7, #26]
 8000f0a:	8bb9      	ldrh	r1, [r7, #28]
 8000f0c:	6a3a      	ldr	r2, [r7, #32]
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	2400      	movs	r4, #0
 8000f12:	9401      	str	r4, [sp, #4]
 8000f14:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8000f18:	9400      	str	r4, [sp, #0]
 8000f1a:	f001 f95d 	bl	80021d8 <ST7789_WriteString>
  else
  {
    // ST7789_WriteString(apu1_Char,               ast_Text.int_X, ast_Text.int_Y, COLOR_BLACK, ast_Text.u1_Color, ast_Text.pcs_size);
    ST7789_WriteString(ast_Text.int_X, ast_Text.int_Y, apu1_Char              , ast_Text.pc_Font, WHITE, BLACK);
  }
}
 8000f1e:	e00a      	b.n	8000f36 <DrawText+0x44>
    ST7789_WriteString(ast_Text.int_X, ast_Text.int_Y, apu1_Char              , ast_Text.pc_Font, WHITE, BLACK);
 8000f20:	8b78      	ldrh	r0, [r7, #26]
 8000f22:	8bb9      	ldrh	r1, [r7, #28]
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	9201      	str	r2, [sp, #4]
 8000f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2e:	9200      	str	r2, [sp, #0]
 8000f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f32:	f001 f951 	bl	80021d8 <ST7789_WriteString>
}
 8000f36:	bf00      	nop
 8000f38:	3704      	adds	r7, #4
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f40:	b004      	add	sp, #16
 8000f42:	4770      	bx	lr

08000f44 <DrawIcon>:

void DrawIcon(const ST_LCD_ICON_INFO ast_Icon)
{
 8000f44:	b084      	sub	sp, #16
 8000f46:	b590      	push	{r4, r7, lr}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af02      	add	r7, sp, #8
 8000f4c:	f107 0410 	add.w	r4, r7, #16
 8000f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DrawBox(ast_Icon.st_Box);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f5c:	f7ff ffb6 	bl	8000ecc <DrawBox>
	ST7789_DrawImage(ast_Icon.int_X, ast_Icon.int_Y, ast_Icon.st_Box.int_W, ast_Icon.st_Box.int_H, ast_Icon.pcs_icon);
 8000f60:	8b78      	ldrh	r0, [r7, #26]
 8000f62:	8bb9      	ldrh	r1, [r7, #28]
 8000f64:	8aba      	ldrh	r2, [r7, #20]
 8000f66:	8afc      	ldrh	r4, [r7, #22]
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	f001 f868 	bl	8002042 <ST7789_DrawImage>
}
 8000f72:	bf00      	nop
 8000f74:	3704      	adds	r7, #4
 8000f76:	46bd      	mov	sp, r7
 8000f78:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4770      	bx	lr

08000f80 <S1_IntToASCII>:

U2 au2_Div;
S1 S1_IntToASCII(S4 as4_Int, U1 *apu1_Str, U1 au1_Num, U1 au1_Mode)
{
 8000f80:	b4b0      	push	{r4, r5, r7}
 8000f82:	b097      	sub	sp, #92	; 0x5c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	460b      	mov	r3, r1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	4613      	mov	r3, r2
 8000f94:	71bb      	strb	r3, [r7, #6]
  S1 as1_Sign;
  U1 au1_Cnt;
  U1 au1_Radix;
  U1 au1_NoSpace = U1FALSE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  //U2 au2_Div;
  S4 *aps4_Table;
  S4 as4_Table[2][8] = {
 8000f9c:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <S1_IntToASCII+0x134>)
 8000f9e:	f107 0410 	add.w	r4, r7, #16
 8000fa2:	461d      	mov	r5, r3
 8000fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {1L, 10L, 100L, 1000L, 10000L, 100000L, 1000000L,  10000000L }, // Mode = 0 10進
    {1L, 16L, 256L, 4096L, 65536L, 1048576L, 16777216L, 268435456L}, // Mode = 1 16進
  };

  // 基数設??
  au1_Radix = au1_Mode & 0x01;  // Mode = 2の場合???10進数とする
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

  // 数値→ASCII??字???変換
  if (as4_Int < 0) {
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	da06      	bge.n	8000fd6 <S1_IntToASCII+0x56>
    as4_Int *= (S4) - 1;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	425b      	negs	r3, r3
 8000fcc:	60fb      	str	r3, [r7, #12]
    as1_Sign = (S1) - 1;
 8000fce:	23ff      	movs	r3, #255	; 0xff
 8000fd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000fd4:	e009      	b.n	8000fea <S1_IntToASCII+0x6a>
  } else if ( as4_Int > 0) {
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	dd03      	ble.n	8000fe4 <S1_IntToASCII+0x64>
    as1_Sign = (S1)1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000fe2:	e002      	b.n	8000fea <S1_IntToASCII+0x6a>
  } else {
    as1_Sign = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  }
  for (au1_Cnt = au1_Num; au1_Cnt > 0; au1_Cnt--, apu1_Str++) {
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000ff0:	e054      	b.n	800109c <S1_IntToASCII+0x11c>
    aps4_Table = &as4_Table[au1_Radix][au1_Cnt - 1];
 8000ff2:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000ff6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f107 0210 	add.w	r2, r7, #16
 8001000:	00c9      	lsls	r1, r1, #3
 8001002:	440b      	add	r3, r1
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	653b      	str	r3, [r7, #80]	; 0x50

    if (as4_Int != 0) {
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d024      	beq.n	800105a <S1_IntToASCII+0xda>
      au2_Div = (U2)(as4_Int / (S4) * aps4_Table);
 8001010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	fb92 f3f3 	sdiv	r3, r2, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <S1_IntToASCII+0x138>)
 800101e:	801a      	strh	r2, [r3, #0]
      if ( au2_Div < 10 ) {
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <S1_IntToASCII+0x138>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2b09      	cmp	r3, #9
 8001026:	d807      	bhi.n	8001038 <S1_IntToASCII+0xb8>
        *apu1_Str = (U1)(au2_Div + '0');
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <S1_IntToASCII+0x138>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3330      	adds	r3, #48	; 0x30
 8001030:	b2da      	uxtb	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e006      	b.n	8001046 <S1_IntToASCII+0xc6>
      } else {
        *apu1_Str = (U1)(au2_Div + 'A' - 10);
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <S1_IntToASCII+0x138>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3337      	adds	r3, #55	; 0x37
 8001040:	b2da      	uxtb	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	701a      	strb	r2, [r3, #0]
      }
      as4_Int %= *aps4_Table;
 8001046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001050:	fb01 f202 	mul.w	r2, r1, r2
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e002      	b.n	8001060 <S1_IntToASCII+0xe0>
    } else {
      *apu1_Str = '0';
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2230      	movs	r2, #48	; 0x30
 800105e:	701a      	strb	r2, [r3, #0]
    }
    // Mode=2 '0'→スペ???ス変換
    if ( au1_Mode == 2 ) {
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d112      	bne.n	800108c <S1_IntToASCII+0x10c>
      if ( ( au1_Cnt > 1 )
 8001066:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800106a:	2b01      	cmp	r3, #1
 800106c:	d90b      	bls.n	8001086 <S1_IntToASCII+0x106>
           && ( *apu1_Str == '0' )
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b30      	cmp	r3, #48	; 0x30
 8001074:	d107      	bne.n	8001086 <S1_IntToASCII+0x106>
           && ( au1_NoSpace == U1FALSE ) ) {
 8001076:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <S1_IntToASCII+0x106>
        // 10進数で上位桁が'0'の場合???スペ???スへ変換
        *apu1_Str = 0x20;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2220      	movs	r2, #32
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e002      	b.n	800108c <S1_IntToASCII+0x10c>
      } else {
        au1_NoSpace = U1TRUE;
 8001086:	2301      	movs	r3, #1
 8001088:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  for (au1_Cnt = au1_Num; au1_Cnt > 0; au1_Cnt--, apu1_Str++) {
 800108c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001090:	3b01      	subs	r3, #1
 8001092:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	3301      	adds	r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1a6      	bne.n	8000ff2 <S1_IntToASCII+0x72>
      }
    }
  }

  return as1_Sign;
 80010a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	375c      	adds	r7, #92	; 0x5c
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bcb0      	pop	{r4, r5, r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	080044b8 	.word	0x080044b8
 80010b8:	20000048 	.word	0x20000048

080010bc <DisplayPressure>:

static void DisplayPressure(const U2 au2_Pressure)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b08d      	sub	sp, #52	; 0x34
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
    U1 au1_ShipPressure[U1_SHIP_PRESSURE_DIGITS+1];
    F4 af4_pressure;
    S4 s4_val;

    af4_pressure = ((F4)au2_Pressure*100)/((F4)100000);
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001220 <DisplayPressure+0x164>
 80010d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010d8:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001224 <DisplayPressure+0x168>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	edc7 7a07 	vstr	s15, [r7, #28]

    if(af4_pressure > 10)
 80010e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	dd01      	ble.n	80010fa <DisplayPressure+0x3e>
    {
        af4_pressure = 10;
 80010f6:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <DisplayPressure+0x16c>)
 80010f8:	61fb      	str	r3, [r7, #28]
    }

    U1 dispPressureBar = af4_pressure * cst_Box[0].int_H / 10.0;
 80010fa:	2350      	movs	r3, #80	; 0x50
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001104:	edd7 7a07 	vldr	s15, [r7, #28]
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	ee17 0a90 	vmov	r0, s15
 8001110:	f7ff f9c6 	bl	80004a0 <__aeabi_f2d>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <DisplayPressure+0x170>)
 800111a:	f7ff fb43 	bl	80007a4 <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fc25 	bl	8000974 <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	76fb      	strb	r3, [r7, #27]
    if(af4_pressure <= 0.7f)
 800112e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001132:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001230 <DisplayPressure+0x174>
 8001136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	d81f      	bhi.n	8001180 <DisplayPressure+0xc4>
    {
    	ST7789_DrawFilledRectangle(cst_Box[0].int_X, cst_Box[0].int_Y, cst_Box[0].int_W, cst_Box[0].int_H-dispPressureBar, cst_Box[0].u1_Color);
 8001140:	2091      	movs	r0, #145	; 0x91
 8001142:	2191      	movs	r1, #145	; 0x91
 8001144:	240f      	movs	r4, #15
 8001146:	2250      	movs	r2, #80	; 0x50
 8001148:	7efb      	ldrb	r3, [r7, #27]
 800114a:	b29b      	uxth	r3, r3
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	2200      	movs	r2, #0
 8001152:	9200      	str	r2, [sp, #0]
 8001154:	4622      	mov	r2, r4
 8001156:	f001 f886 	bl	8002266 <ST7789_DrawFilledRectangle>
    	ST7789_DrawFilledRectangle(cst_Box[0].int_X, cst_Box[0].int_Y + cst_Box[0].int_H-dispPressureBar, cst_Box[0].int_W, dispPressureBar, RED);
 800115a:	2091      	movs	r0, #145	; 0x91
 800115c:	2291      	movs	r2, #145	; 0x91
 800115e:	2350      	movs	r3, #80	; 0x50
 8001160:	4413      	add	r3, r2
 8001162:	b29a      	uxth	r2, r3
 8001164:	7efb      	ldrb	r3, [r7, #27]
 8001166:	b29b      	uxth	r3, r3
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	b299      	uxth	r1, r3
 800116c:	240f      	movs	r4, #15
 800116e:	7efb      	ldrb	r3, [r7, #27]
 8001170:	b29b      	uxth	r3, r3
 8001172:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	4622      	mov	r2, r4
 800117a:	f001 f874 	bl	8002266 <ST7789_DrawFilledRectangle>
 800117e:	e01e      	b.n	80011be <DisplayPressure+0x102>
    }
    else
    {
    	ST7789_DrawFilledRectangle(cst_Box[0].int_X, cst_Box[0].int_Y, cst_Box[0].int_W, cst_Box[0].int_H-dispPressureBar, cst_Box[0].u1_Color);
 8001180:	2091      	movs	r0, #145	; 0x91
 8001182:	2191      	movs	r1, #145	; 0x91
 8001184:	240f      	movs	r4, #15
 8001186:	2250      	movs	r2, #80	; 0x50
 8001188:	7efb      	ldrb	r3, [r7, #27]
 800118a:	b29b      	uxth	r3, r3
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	2200      	movs	r2, #0
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	4622      	mov	r2, r4
 8001196:	f001 f866 	bl	8002266 <ST7789_DrawFilledRectangle>
    	ST7789_DrawFilledRectangle(cst_Box[0].int_X, cst_Box[0].int_Y + cst_Box[0].int_H-dispPressureBar, cst_Box[0].int_W, dispPressureBar, GREEN);
 800119a:	2091      	movs	r0, #145	; 0x91
 800119c:	2291      	movs	r2, #145	; 0x91
 800119e:	2350      	movs	r3, #80	; 0x50
 80011a0:	4413      	add	r3, r2
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	7efb      	ldrb	r3, [r7, #27]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b299      	uxth	r1, r3
 80011ac:	240f      	movs	r4, #15
 80011ae:	7efb      	ldrb	r3, [r7, #27]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011b6:	9200      	str	r2, [sp, #0]
 80011b8:	4622      	mov	r2, r4
 80011ba:	f001 f854 	bl	8002266 <ST7789_DrawFilledRectangle>
    }
    // 少数点第一位まで表示
    s4_val = af4_pressure * 100;
 80011be:	edd7 7a07 	vldr	s15, [r7, #28]
 80011c2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001220 <DisplayPressure+0x164>
 80011c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	617b      	str	r3, [r7, #20]

    // 数値をASCII文字に変換
    (void)S1_IntToASCII(s4_val, au1_ShipPressure,U1_SHIP_PRESSURE_DIGITS,2);
 80011d4:	f107 010c 	add.w	r1, r7, #12
 80011d8:	2302      	movs	r3, #2
 80011da:	2204      	movs	r2, #4
 80011dc:	6978      	ldr	r0, [r7, #20]
 80011de:	f7ff fecf 	bl	8000f80 <S1_IntToASCII>
    // |1|0|0|0|/0| => |1|0|.|0|/0|
    // | | |7|0|/0| => | |0|.|7|/0|
    // | | | |0|/0| => | |0|.|0|/0|
    // 0補正
    if(au1_ShipPressure[U1_SHIP_PRESSURE_DIGITS - 3]== ' ')
 80011e2:	7b7b      	ldrb	r3, [r7, #13]
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	d101      	bne.n	80011ec <DisplayPressure+0x130>
    {
        au1_ShipPressure[U1_SHIP_PRESSURE_DIGITS - 3]= '0';
 80011e8:	2330      	movs	r3, #48	; 0x30
 80011ea:	737b      	strb	r3, [r7, #13]
    }

    au1_ShipPressure[U1_SHIP_PRESSURE_DIGITS - 1] = au1_ShipPressure[U1_SHIP_PRESSURE_DIGITS - 2];
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	73fb      	strb	r3, [r7, #15]
    au1_ShipPressure[U1_SHIP_PRESSURE_DIGITS - 2] = '.';
 80011f0:	232e      	movs	r3, #46	; 0x2e
 80011f2:	73bb      	strb	r3, [r7, #14]
    au1_ShipPressure[U1_SHIP_PRESSURE_DIGITS] = '\0';
 80011f4:	2300      	movs	r3, #0
 80011f6:	743b      	strb	r3, [r7, #16]
    // 数値を表示
    DrawText(cst_Text[U1_INDEX_TEXT_SHIP_PRESSURE_VALUE], (char *)au1_ShipPressure);
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <DisplayPressure+0x178>)
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	9202      	str	r2, [sp, #8]
 8001200:	466c      	mov	r4, sp
 8001202:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8001206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120a:	e884 0003 	stmia.w	r4, {r0, r1}
 800120e:	3378      	adds	r3, #120	; 0x78
 8001210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001212:	f7ff fe6e 	bl	8000ef2 <DrawText>
}
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	42c80000 	.word	0x42c80000
 8001224:	47c35000 	.word	0x47c35000
 8001228:	41200000 	.word	0x41200000
 800122c:	40240000 	.word	0x40240000
 8001230:	3f333333 	.word	0x3f333333
 8001234:	0800ce24 	.word	0x0800ce24

08001238 <DisplayTemperature>:
    F4 af4_Temp;
//    U1 au1_ShipTemperature[U1_SHIP_TEMPERATURE_DIGITS+1];

static void DisplayTemperature(const U2 au2_Temp)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af04      	add	r7, sp, #16
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
    S4 s4_val;
    for (U1 au1_ForC = 0; au1_ForC <= U1_SHIP_TEMPERATURE_DIGITS; au1_ForC++)
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	e006      	b.n	8001256 <DisplayTemperature+0x1e>
    {
        au1_ShipTemperature[au1_ForC] = U1MIN;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	4a5d      	ldr	r2, [pc, #372]	; (80013c0 <DisplayTemperature+0x188>)
 800124c:	2100      	movs	r1, #0
 800124e:	54d1      	strb	r1, [r2, r3]
    for (U1 au1_ForC = 0; au1_ForC <= U1_SHIP_TEMPERATURE_DIGITS; au1_ForC++)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	3301      	adds	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d9f5      	bls.n	8001248 <DisplayTemperature+0x10>
    }


    af4_Temp = ((F4)au2_Temp/100)-273;
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001266:	eddf 6a57 	vldr	s13, [pc, #348]	; 80013c4 <DisplayTemperature+0x18c>
 800126a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80013c8 <DisplayTemperature+0x190>
 8001272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001276:	4b55      	ldr	r3, [pc, #340]	; (80013cc <DisplayTemperature+0x194>)
 8001278:	edc3 7a00 	vstr	s15, [r3]

    if(af4_Temp > 120.0f){
 800127c:	4b53      	ldr	r3, [pc, #332]	; (80013cc <DisplayTemperature+0x194>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80013d0 <DisplayTemperature+0x198>
 8001286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	dd03      	ble.n	8001298 <DisplayTemperature+0x60>
        af4_Temp = 120.0f;
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <DisplayTemperature+0x194>)
 8001292:	4a50      	ldr	r2, [pc, #320]	; (80013d4 <DisplayTemperature+0x19c>)
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00b      	b.n	80012b0 <DisplayTemperature+0x78>
    } else if(af4_Temp < 0){
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <DisplayTemperature+0x194>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	d503      	bpl.n	80012b0 <DisplayTemperature+0x78>
        af4_Temp = 0;
 80012a8:	4b48      	ldr	r3, [pc, #288]	; (80013cc <DisplayTemperature+0x194>)
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
    else
    {
        // DrawText(cst_Text[U1_INDEX_TEXT_TEMP_STATUS], PU1_TEXT_MSG_DF);
    }

    U1 dispTemperatureBar = af4_Temp * cst_Box[1].int_H / 120.0;
 80012b0:	2350      	movs	r3, #80	; 0x50
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ba:	4b44      	ldr	r3, [pc, #272]	; (80013cc <DisplayTemperature+0x194>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	ee17 0a90 	vmov	r0, s15
 80012c8:	f7ff f8ea 	bl	80004a0 <__aeabi_f2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <DisplayTemperature+0x1a0>)
 80012d2:	f7ff fa67 	bl	80007a4 <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fb49 	bl	8000974 <__aeabi_d2uiz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73bb      	strb	r3, [r7, #14]

    if(af4_Temp >= 96.0f)
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <DisplayTemperature+0x194>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80013dc <DisplayTemperature+0x1a4>
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	db1f      	blt.n	800133a <DisplayTemperature+0x102>
    {
    	ST7789_DrawFilledRectangle(cst_Box[1].int_X, cst_Box[1].int_Y, cst_Box[1].int_W, cst_Box[1].int_H-dispTemperatureBar, cst_Box[1].u1_Color);
 80012fa:	20d2      	movs	r0, #210	; 0xd2
 80012fc:	2191      	movs	r1, #145	; 0x91
 80012fe:	240f      	movs	r4, #15
 8001300:	2250      	movs	r2, #80	; 0x50
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	b29b      	uxth	r3, r3
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	b29b      	uxth	r3, r3
 800130a:	2200      	movs	r2, #0
 800130c:	9200      	str	r2, [sp, #0]
 800130e:	4622      	mov	r2, r4
 8001310:	f000 ffa9 	bl	8002266 <ST7789_DrawFilledRectangle>
    	ST7789_DrawFilledRectangle(cst_Box[1].int_X, cst_Box[1].int_Y + cst_Box[1].int_H-dispTemperatureBar, cst_Box[1].int_W, dispTemperatureBar, RED);
 8001314:	20d2      	movs	r0, #210	; 0xd2
 8001316:	2291      	movs	r2, #145	; 0x91
 8001318:	2350      	movs	r3, #80	; 0x50
 800131a:	4413      	add	r3, r2
 800131c:	b29a      	uxth	r2, r3
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	b29b      	uxth	r3, r3
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b299      	uxth	r1, r3
 8001326:	240f      	movs	r4, #15
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	b29b      	uxth	r3, r3
 800132c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	4622      	mov	r2, r4
 8001334:	f000 ff97 	bl	8002266 <ST7789_DrawFilledRectangle>
 8001338:	e01e      	b.n	8001378 <DisplayTemperature+0x140>
    }
    else
    {
    	ST7789_DrawFilledRectangle(cst_Box[1].int_X, cst_Box[1].int_Y, cst_Box[1].int_W, cst_Box[1].int_H-dispTemperatureBar, cst_Box[1].u1_Color);
 800133a:	20d2      	movs	r0, #210	; 0xd2
 800133c:	2191      	movs	r1, #145	; 0x91
 800133e:	240f      	movs	r4, #15
 8001340:	2250      	movs	r2, #80	; 0x50
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	b29b      	uxth	r3, r3
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	b29b      	uxth	r3, r3
 800134a:	2200      	movs	r2, #0
 800134c:	9200      	str	r2, [sp, #0]
 800134e:	4622      	mov	r2, r4
 8001350:	f000 ff89 	bl	8002266 <ST7789_DrawFilledRectangle>
    	ST7789_DrawFilledRectangle(cst_Box[1].int_X, cst_Box[1].int_Y + cst_Box[1].int_H-dispTemperatureBar, cst_Box[1].int_W, dispTemperatureBar, GREEN);
 8001354:	20d2      	movs	r0, #210	; 0xd2
 8001356:	2291      	movs	r2, #145	; 0x91
 8001358:	2350      	movs	r3, #80	; 0x50
 800135a:	4413      	add	r3, r2
 800135c:	b29a      	uxth	r2, r3
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	b29b      	uxth	r3, r3
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b299      	uxth	r1, r3
 8001366:	240f      	movs	r4, #15
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	b29b      	uxth	r3, r3
 800136c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001370:	9200      	str	r2, [sp, #0]
 8001372:	4622      	mov	r2, r4
 8001374:	f000 ff77 	bl	8002266 <ST7789_DrawFilledRectangle>
    }

    // s4_val = af4_Temp * 10;
    s4_val = af4_Temp;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <DisplayTemperature+0x194>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	60bb      	str	r3, [r7, #8]
    // 数値をASCII文字に変換
    (void)S1_IntToASCII(s4_val, au1_ShipTemperature,U1_SHIP_TEMPERATURE_DIGITS,2);
 8001388:	2302      	movs	r3, #2
 800138a:	2203      	movs	r2, #3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <DisplayTemperature+0x188>)
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f7ff fdf6 	bl	8000f80 <S1_IntToASCII>
    // {
    //     au1_Temp[U1_TEMP_DIGITS - 3]='0';
    // }
    // au1_Temp[U1_TEMP_DIGITS - 1] = au1_Temp[U1_TEMP_DIGITS - 2];
    // au1_Temp[U1_TEMP_DIGITS - 2] = '.';
    au1_ShipTemperature[U1_SHIP_TEMPERATURE_DIGITS] = '\0';
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <DisplayTemperature+0x188>)
 8001396:	2200      	movs	r2, #0
 8001398:	70da      	strb	r2, [r3, #3]
    // 数値を表示
    DrawText(cst_Text[U1_INDEX_TEXT_SHIP_TEMPERATURE_VALUE], (char *)au1_ShipTemperature);
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <DisplayTemperature+0x1a8>)
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <DisplayTemperature+0x188>)
 800139e:	9202      	str	r2, [sp, #8]
 80013a0:	466c      	mov	r4, sp
 80013a2:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80013a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80013ae:	33a8      	adds	r3, #168	; 0xa8
 80013b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b2:	f7ff fd9e 	bl	8000ef2 <DrawText>
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000044 	.word	0x20000044
 80013c4:	42c80000 	.word	0x42c80000
 80013c8:	43888000 	.word	0x43888000
 80013cc:	2000004c 	.word	0x2000004c
 80013d0:	42f00000 	.word	0x42f00000
 80013d4:	42f00000 	.word	0x42f00000
 80013d8:	405e0000 	.word	0x405e0000
 80013dc:	42c00000 	.word	0x42c00000
 80013e0:	0800ce24 	.word	0x0800ce24

080013e4 <DisplayBattery>:

static void DisplayBattery(const U2 au2_Battery)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08d      	sub	sp, #52	; 0x34
 80013e8:	af04      	add	r7, sp, #16
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
    U1 au1_ShipBattery[U1_SHIP_BATTERY_DIGITS+1];
    F4 af4_Battery;
    S4 s4_val;
//    const ST_LCDITEMDATA *acpst_ItemData = &cs_LCD_ItemData_Msg[U1_LCD_MSG003];

    af4_Battery = (F4)au2_Battery / (F4)100;
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f8:	eddf 6a58 	vldr	s13, [pc, #352]	; 800155c <DisplayBattery+0x178>
 80013fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001400:	edc7 7a07 	vstr	s15, [r7, #28]
    if((af4_Battery < 8.1f) ||
 8001404:	edd7 7a07 	vldr	s15, [r7, #28]
 8001408:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001560 <DisplayBattery+0x17c>
 800140c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	d408      	bmi.n	8001428 <DisplayBattery+0x44>
 8001416:	edd7 7a07 	vldr	s15, [r7, #28]
 800141a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001564 <DisplayBattery+0x180>
 800141e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	dd02      	ble.n	800142e <DisplayBattery+0x4a>
        (af4_Battery > 300.1f))
    {
        af4_Battery = 0.0;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    }

    U1 dispBatteryBar = af4_Battery * cst_Box[2].int_H / 120.0;
 800142e:	2350      	movs	r3, #80	; 0x50
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001438:	edd7 7a07 	vldr	s15, [r7, #28]
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	ee17 0a90 	vmov	r0, s15
 8001444:	f7ff f82c 	bl	80004a0 <__aeabi_f2d>
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <DisplayBattery+0x184>)
 800144e:	f7ff f9a9 	bl	80007a4 <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fa8b 	bl	8000974 <__aeabi_d2uiz>
 800145e:	4603      	mov	r3, r0
 8001460:	76fb      	strb	r3, [r7, #27]
    if(af4_Battery < 11.5f)
 8001462:	edd7 7a07 	vldr	s15, [r7, #28]
 8001466:	eeb2 7a07 	vmov.f32	s14, #39	; 0x41380000  11.5
 800146a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	d521      	bpl.n	80014b8 <DisplayBattery+0xd4>
    {
        ST7789_DrawFilledRectangle(cst_Box[2].int_X, cst_Box[2].int_Y, cst_Box[2].int_W, cst_Box[2].int_H-dispBatteryBar, cst_Box[2].u1_Color);
 8001474:	f240 1013 	movw	r0, #275	; 0x113
 8001478:	2191      	movs	r1, #145	; 0x91
 800147a:	240f      	movs	r4, #15
 800147c:	2250      	movs	r2, #80	; 0x50
 800147e:	7efb      	ldrb	r3, [r7, #27]
 8001480:	b29b      	uxth	r3, r3
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	2200      	movs	r2, #0
 8001488:	9200      	str	r2, [sp, #0]
 800148a:	4622      	mov	r2, r4
 800148c:	f000 feeb 	bl	8002266 <ST7789_DrawFilledRectangle>
    	ST7789_DrawFilledRectangle(cst_Box[2].int_X, cst_Box[2].int_Y + cst_Box[2].int_H-dispBatteryBar, cst_Box[2].int_W, dispBatteryBar, RED);
 8001490:	f240 1013 	movw	r0, #275	; 0x113
 8001494:	2291      	movs	r2, #145	; 0x91
 8001496:	2350      	movs	r3, #80	; 0x50
 8001498:	4413      	add	r3, r2
 800149a:	b29a      	uxth	r2, r3
 800149c:	7efb      	ldrb	r3, [r7, #27]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b299      	uxth	r1, r3
 80014a4:	240f      	movs	r4, #15
 80014a6:	7efb      	ldrb	r3, [r7, #27]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	4622      	mov	r2, r4
 80014b2:	f000 fed8 	bl	8002266 <ST7789_DrawFilledRectangle>
 80014b6:	e020      	b.n	80014fa <DisplayBattery+0x116>
    }
    else
    {
        ST7789_DrawFilledRectangle(cst_Box[2].int_X, cst_Box[2].int_Y, cst_Box[2].int_W, cst_Box[2].int_H-dispBatteryBar, cst_Box[2].u1_Color);
 80014b8:	f240 1013 	movw	r0, #275	; 0x113
 80014bc:	2191      	movs	r1, #145	; 0x91
 80014be:	240f      	movs	r4, #15
 80014c0:	2250      	movs	r2, #80	; 0x50
 80014c2:	7efb      	ldrb	r3, [r7, #27]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2200      	movs	r2, #0
 80014cc:	9200      	str	r2, [sp, #0]
 80014ce:	4622      	mov	r2, r4
 80014d0:	f000 fec9 	bl	8002266 <ST7789_DrawFilledRectangle>
    	ST7789_DrawFilledRectangle(cst_Box[2].int_X, cst_Box[2].int_Y + cst_Box[2].int_H-dispBatteryBar, cst_Box[2].int_W, dispBatteryBar, GREEN);
 80014d4:	f240 1013 	movw	r0, #275	; 0x113
 80014d8:	2291      	movs	r2, #145	; 0x91
 80014da:	2350      	movs	r3, #80	; 0x50
 80014dc:	4413      	add	r3, r2
 80014de:	b29a      	uxth	r2, r3
 80014e0:	7efb      	ldrb	r3, [r7, #27]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	b299      	uxth	r1, r3
 80014e8:	240f      	movs	r4, #15
 80014ea:	7efb      	ldrb	r3, [r7, #27]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	4622      	mov	r2, r4
 80014f6:	f000 feb6 	bl	8002266 <ST7789_DrawFilledRectangle>
    }
    // 少数点第一位まで表示
    s4_val = af4_Battery * 100;
 80014fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80014fe:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800155c <DisplayBattery+0x178>
 8001502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150a:	ee17 3a90 	vmov	r3, s15
 800150e:	617b      	str	r3, [r7, #20]
    // 数値をASCII文字に変換
    (void)S1_IntToASCII(s4_val, &au1_ShipBattery[0],U1_SHIP_BATTERY_DIGITS,2);
 8001510:	f107 010c 	add.w	r1, r7, #12
 8001514:	2302      	movs	r3, #2
 8001516:	2204      	movs	r2, #4
 8001518:	6978      	ldr	r0, [r7, #20]
 800151a:	f7ff fd31 	bl	8000f80 <S1_IntToASCII>
    // 0補正
    // |1|2|1|0|/0|
    // |1|2|.|1|/0|
    // | | | |0|/0|
    // | |0|.|0|/0|
    if(au1_ShipBattery[U1_SHIP_BATTERY_DIGITS - 3]== ' ')
 800151e:	7b7b      	ldrb	r3, [r7, #13]
 8001520:	2b20      	cmp	r3, #32
 8001522:	d101      	bne.n	8001528 <DisplayBattery+0x144>
    {
        au1_ShipBattery[U1_SHIP_BATTERY_DIGITS - 3]= '0';
 8001524:	2330      	movs	r3, #48	; 0x30
 8001526:	737b      	strb	r3, [r7, #13]
    }
    au1_ShipBattery[U1_SHIP_BATTERY_DIGITS - 1] = au1_ShipBattery[U1_SHIP_BATTERY_DIGITS - 2];
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	73fb      	strb	r3, [r7, #15]
    au1_ShipBattery[U1_SHIP_BATTERY_DIGITS - 2] = '.';
 800152c:	232e      	movs	r3, #46	; 0x2e
 800152e:	73bb      	strb	r3, [r7, #14]
    au1_ShipBattery[U1_SHIP_BATTERY_DIGITS] = '\0';
 8001530:	2300      	movs	r3, #0
 8001532:	743b      	strb	r3, [r7, #16]

    // 数値を表示
    DrawText(cst_Text[U1_INDEX_TEXT_SHIP_BATTERY_VALUE], (char *)au1_ShipBattery);
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <DisplayBattery+0x188>)
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	9202      	str	r2, [sp, #8]
 800153c:	466c      	mov	r4, sp
 800153e:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8001542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001546:	e884 0003 	stmia.w	r4, {r0, r1}
 800154a:	33d8      	adds	r3, #216	; 0xd8
 800154c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154e:	f7ff fcd0 	bl	8000ef2 <DrawText>
}
 8001552:	bf00      	nop
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	bf00      	nop
 800155c:	42c80000 	.word	0x42c80000
 8001560:	4101999a 	.word	0x4101999a
 8001564:	43960ccd 	.word	0x43960ccd
 8001568:	405e0000 	.word	0x405e0000
 800156c:	0800ce24 	.word	0x0800ce24

08001570 <DisplayOperatingHour>:


static void DisplayOperatingHour(const U8 au4_OperatingHour)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b08b      	sub	sp, #44	; 0x2c
 8001574:	af04      	add	r7, sp, #16
 8001576:	e9c7 0100 	strd	r0, r1, [r7]
	U1 au1_ShipOperHour[U1_SHIP_OPERHOUR_DIGITS+1];
    F4 af4_OperatingHour;
	S4 s4_val;

    af4_OperatingHour = (F4)au4_OperatingHour/3600;
 800157a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800157e:	f7ff fae1 	bl	8000b44 <__aeabi_ul2f>
 8001582:	ee06 0a90 	vmov	s13, r0
 8001586:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001608 <DisplayOperatingHour+0x98>
 800158a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158e:	edc7 7a05 	vstr	s15, [r7, #20]
    if(af4_OperatingHour > 9999.9f)
 8001592:	edd7 7a05 	vldr	s15, [r7, #20]
 8001596:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800160c <DisplayOperatingHour+0x9c>
 800159a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	dd01      	ble.n	80015a8 <DisplayOperatingHour+0x38>
    {
        af4_OperatingHour = 9999.9f;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <DisplayOperatingHour+0xa0>)
 80015a6:	617b      	str	r3, [r7, #20]
    }
    // 少数点第一位まで表示
    s4_val = af4_OperatingHour * 10;
 80015a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b8:	ee17 3a90 	vmov	r3, s15
 80015bc:	613b      	str	r3, [r7, #16]

    // 数値をASCII文字に変換
    (void)S1_IntToASCII(s4_val, &au1_ShipOperHour[0],U1_SHIP_OPERHOUR_DIGITS - 1,2);
 80015be:	f107 0108 	add.w	r1, r7, #8
 80015c2:	2302      	movs	r3, #2
 80015c4:	2206      	movs	r2, #6
 80015c6:	6938      	ldr	r0, [r7, #16]
 80015c8:	f7ff fcda 	bl	8000f80 <S1_IntToASCII>
    // 0補正
    if(au1_ShipOperHour[U1_SHIP_OPERHOUR_DIGITS - 3]== ' ')
 80015cc:	7b3b      	ldrb	r3, [r7, #12]
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d101      	bne.n	80015d6 <DisplayOperatingHour+0x66>
    {
        au1_ShipOperHour[U1_SHIP_OPERHOUR_DIGITS - 3]= '0';
 80015d2:	2330      	movs	r3, #48	; 0x30
 80015d4:	733b      	strb	r3, [r7, #12]
    }
    au1_ShipOperHour[U1_SHIP_OPERHOUR_DIGITS - 1] = au1_ShipOperHour[U1_SHIP_OPERHOUR_DIGITS - 2];
 80015d6:	7b7b      	ldrb	r3, [r7, #13]
 80015d8:	73bb      	strb	r3, [r7, #14]
    au1_ShipOperHour[U1_SHIP_OPERHOUR_DIGITS - 2] = '.';
 80015da:	232e      	movs	r3, #46	; 0x2e
 80015dc:	737b      	strb	r3, [r7, #13]
    au1_ShipOperHour[U1_SHIP_OPERHOUR_DIGITS] = '\0';
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
    // 数値を表示
    DrawText(cst_Text[U1_INDEX_TEXT_SHIP_OPERHOUR_VALUE], (char *)au1_ShipOperHour);
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <DisplayOperatingHour+0xa4>)
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	9202      	str	r2, [sp, #8]
 80015ea:	466c      	mov	r4, sp
 80015ec:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80015f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80015f8:	3348      	adds	r3, #72	; 0x48
 80015fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fc:	f7ff fc79 	bl	8000ef2 <DrawText>
}
 8001600:	bf00      	nop
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	45610000 	.word	0x45610000
 800160c:	461c3f9a 	.word	0x461c3f9a
 8001610:	461c3f9a 	.word	0x461c3f9a
 8001614:	0800ce24 	.word	0x0800ce24

08001618 <DisplayRPM>:

static void DisplayRPM(const U2 au2_speed)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af04      	add	r7, sp, #16
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
    U1 au1_ShipRPM[U1_SHIP_RPM_DIGITS+1];
    U2 au2_rpm;

    au2_rpm = au2_speed * 0.25;
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff29 	bl	800047c <__aeabi_i2d>
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <DisplayRPM+0x64>)
 8001630:	f7fe ff8e 	bl	8000550 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff f99a 	bl	8000974 <__aeabi_d2uiz>
 8001640:	4603      	mov	r3, r0
 8001642:	81fb      	strh	r3, [r7, #14]
//    {
//        au2_rpm = U2_RPM;
//    }

    // 数値をASCII文字に変換
    (void)S1_IntToASCII((S4)au2_rpm, &au1_ShipRPM[0],U1_SHIP_RPM_DIGITS,2);
 8001644:	89f8      	ldrh	r0, [r7, #14]
 8001646:	f107 0108 	add.w	r1, r7, #8
 800164a:	2302      	movs	r3, #2
 800164c:	2204      	movs	r2, #4
 800164e:	f7ff fc97 	bl	8000f80 <S1_IntToASCII>
    au1_ShipRPM[U1_SHIP_RPM_DIGITS] = '\0';
 8001652:	2300      	movs	r3, #0
 8001654:	733b      	strb	r3, [r7, #12]
    // 数値を表示
    DrawText(cst_Text[U1_INDEX_TEXT_SHIP_RPM_VALUE], (char *)au1_ShipRPM);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <DisplayRPM+0x68>)
 8001658:	f107 0208 	add.w	r2, r7, #8
 800165c:	9202      	str	r2, [sp, #8]
 800165e:	466c      	mov	r4, sp
 8001660:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001668:	e884 0003 	stmia.w	r4, {r0, r1}
 800166c:	3318      	adds	r3, #24
 800166e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001670:	f7ff fc3f 	bl	8000ef2 <DrawText>

}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	3fd00000 	.word	0x3fd00000
 8001680:	0800ce24 	.word	0x0800ce24

08001684 <DisplayUVIndex>:

static void DisplayUVIndex(const U2 au2_UVIndex)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af04      	add	r7, sp, #16
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]

    F4 af4_UVIndex;
    S4 s4_val;
//    const ST_LCDITEMDATA *acpst_ItemData = &cs_LCD_ItemData_Msg[U1_LCD_MSG003];

    af4_UVIndex = (F4)au2_UVIndex / (F4)100;
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001698:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001730 <DisplayUVIndex+0xac>
 800169c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a0:	edc7 7a05 	vstr	s15, [r7, #20]
    if((af4_UVIndex < 8.1f) ||
 80016a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001734 <DisplayUVIndex+0xb0>
 80016ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	d408      	bmi.n	80016c8 <DisplayUVIndex+0x44>
 80016b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001738 <DisplayUVIndex+0xb4>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	dd02      	ble.n	80016ce <DisplayUVIndex+0x4a>
        (af4_UVIndex > 300.1f))
    {
        af4_UVIndex = 0.0;
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
    else
    {
        // DrawText(cst_Text[U1_INDEX_TEXT_BATTERY_STATUS], PU1_TEXT_MSG_DF);
    }
    // 少数点第一位まで表示
    s4_val = af4_UVIndex * 100;
 80016ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001730 <DisplayUVIndex+0xac>
 80016d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016de:	ee17 3a90 	vmov	r3, s15
 80016e2:	613b      	str	r3, [r7, #16]
    // 数値をASCII文字に変換
    (void)S1_IntToASCII(s4_val, &au1_ShipUVIndex[0],U1_ENV_UVINDEX_DIGITS,2);
 80016e4:	f107 0108 	add.w	r1, r7, #8
 80016e8:	2302      	movs	r3, #2
 80016ea:	2204      	movs	r2, #4
 80016ec:	6938      	ldr	r0, [r7, #16]
 80016ee:	f7ff fc47 	bl	8000f80 <S1_IntToASCII>
    // 0補正
    // |1|2|1|0|/0|
    // |1|2|.|1|/0|
    // | | | |0|/0|
    // | |0|.|0|/0|
    if(au1_ShipUVIndex[U1_ENV_UVINDEX_DIGITS - 3]== ' ')
 80016f2:	7a7b      	ldrb	r3, [r7, #9]
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d101      	bne.n	80016fc <DisplayUVIndex+0x78>
    {
        au1_ShipUVIndex[U1_ENV_UVINDEX_DIGITS - 3]= '0';
 80016f8:	2330      	movs	r3, #48	; 0x30
 80016fa:	727b      	strb	r3, [r7, #9]
    }
    au1_ShipUVIndex[U1_ENV_UVINDEX_DIGITS - 1] = au1_ShipUVIndex[U1_ENV_UVINDEX_DIGITS - 2];
 80016fc:	7abb      	ldrb	r3, [r7, #10]
 80016fe:	72fb      	strb	r3, [r7, #11]
    au1_ShipUVIndex[U1_ENV_UVINDEX_DIGITS - 2] = '.';
 8001700:	232e      	movs	r3, #46	; 0x2e
 8001702:	72bb      	strb	r3, [r7, #10]
    au1_ShipUVIndex[U1_ENV_UVINDEX_DIGITS] = '\0';
 8001704:	2300      	movs	r3, #0
 8001706:	733b      	strb	r3, [r7, #12]

    // 数値を表示
    DrawText(cst_Text[U1_INDEX_TEXT_ENV_UVINDEX_VALUE], (char *)au1_ShipUVIndex);
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <DisplayUVIndex+0xb8>)
 800170a:	f107 0208 	add.w	r2, r7, #8
 800170e:	9202      	str	r2, [sp, #8]
 8001710:	466c      	mov	r4, sp
 8001712:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8001716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171a:	e884 0003 	stmia.w	r4, {r0, r1}
 800171e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001724:	f7ff fbe5 	bl	8000ef2 <DrawText>
}
 8001728:	bf00      	nop
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	42c80000 	.word	0x42c80000
 8001734:	4101999a 	.word	0x4101999a
 8001738:	43960ccd 	.word	0x43960ccd
 800173c:	0800ce24 	.word	0x0800ce24

08001740 <DisplayBackground>:

static void DisplayBackground(void)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b087      	sub	sp, #28
 8001744:	af04      	add	r7, sp, #16
    U1 au1_ForC;
    #if 1        // DEBUG
    ST7789_DrawFilledRectangle(0, ST7789_HEIGHT/2-3, ST7789_WIDTH, 3, YELLOW);
 8001746:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2303      	movs	r3, #3
 800174e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001752:	2175      	movs	r1, #117	; 0x75
 8001754:	2000      	movs	r0, #0
 8001756:	f000 fd86 	bl	8002266 <ST7789_DrawFilledRectangle>
//    for (au1_ForC = U1MIN; au1_ForC < U1_INDEX_BOX_TOTAL_NUM; au1_ForC++)
//    {
//        DrawBox(cst_Box[au1_ForC]);
//    }
    for (au1_ForC = U1MIN; au1_ForC < U1_INDEX_TEXT_TOTAL_NUM; au1_ForC++)
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	e015      	b.n	800178c <DisplayBackground+0x4c>
    {
        DrawText(cst_Text[au1_ForC], NULL);
 8001760:	79fa      	ldrb	r2, [r7, #7]
 8001762:	4919      	ldr	r1, [pc, #100]	; (80017c8 <DisplayBackground+0x88>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	2200      	movs	r2, #0
 8001770:	9202      	str	r2, [sp, #8]
 8001772:	466c      	mov	r4, sp
 8001774:	f103 0210 	add.w	r2, r3, #16
 8001778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800177c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001782:	f7ff fbb6 	bl	8000ef2 <DrawText>
    for (au1_ForC = U1MIN; au1_ForC < U1_INDEX_TEXT_TOTAL_NUM; au1_ForC++)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3301      	adds	r3, #1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b1c      	cmp	r3, #28
 8001790:	d9e6      	bls.n	8001760 <DisplayBackground+0x20>
    }

//    ST7789_DrawImage(165, 200, 24, 30, (uint16_t *)iconPressure);
//    ST7789_DrawImage(230, 205, 22, 22, (uint16_t *)iconTemperature);
//    ST7789_DrawImage(296, 210, 24, 17, (uint16_t *)iconBattery);
     for (au1_ForC = U1MIN; au1_ForC < U1_INDEX_ICON_TOTAL_NUM; au1_ForC++)
 8001792:	2300      	movs	r3, #0
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	e00e      	b.n	80017b6 <DisplayBackground+0x76>
     {
         DrawIcon(cst_Icon[au1_ForC]);
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	490c      	ldr	r1, [pc, #48]	; (80017cc <DisplayBackground+0x8c>)
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	9200      	str	r2, [sp, #0]
 80017aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ac:	f7ff fbca 	bl	8000f44 <DrawIcon>
     for (au1_ForC = U1MIN; au1_ForC < U1_INDEX_ICON_TOTAL_NUM; au1_ForC++)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	3301      	adds	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d9ed      	bls.n	8001798 <DisplayBackground+0x58>
     }
    #endif
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	0800ce24 	.word	0x0800ce24
 80017cc:	0800cdac 	.word	0x0800cdac

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f000 fea9 	bl	800252c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 f85f 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017de:	f000 f91b 	bl	8001a18 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e2:	f000 f8f9 	bl	80019d8 <MX_DMA_Init>
  MX_SPI1_Init();
 80017e6:	f000 f8c1 	bl	800196c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,  GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2102      	movs	r1, #2
 80017ee:	4828      	ldr	r0, [pc, #160]	; (8001890 <main+0xc0>)
 80017f0:	f001 fd38 	bl	8003264 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80017f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f8:	f000 ff0a 	bl	8002610 <HAL_Delay>
  ST7789_Init();
 80017fc:	f000 fa82 	bl	8001d04 <ST7789_Init>
//ST7789_WriteChar(50, 70, 'p', &Font_8x12, BLACK, YELLOW);
//while(1)
//{
//
//}
  DisplayBackground();
 8001800:	f7ff ff9e 	bl	8001740 <DisplayBackground>
	HAL_Delay(2000);
 8001804:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001808:	f000 ff02 	bl	8002610 <HAL_Delay>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i = 20;
 800180c:	4921      	ldr	r1, [pc, #132]	; (8001894 <main+0xc4>)
 800180e:	f04f 0214 	mov.w	r2, #20
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	e9c1 2300 	strd	r2, r3, [r1]
	  DisplayPressure(24464);
 800181a:	f645 7090 	movw	r0, #24464	; 0x5f90
 800181e:	f7ff fc4d 	bl	80010bc <DisplayPressure>
//	  for(int i = 27300; i < 41300; i++)
//	  {
	  	DisplayTemperature(i);
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <main+0xc4>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	b293      	uxth	r3, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fd04 	bl	8001238 <DisplayTemperature>
//	  }
	  DisplayUVIndex(100*7);
 8001830:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001834:	f7ff ff26 	bl	8001684 <DisplayUVIndex>
	  DisplayBattery(i);
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <main+0xc4>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	b293      	uxth	r3, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fdcf 	bl	80013e4 <DisplayBattery>
	  ST7789_DrawImage(0, 40, 58, 58, weatherSunny);
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <main+0xc8>)
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	233a      	movs	r3, #58	; 0x3a
 800184c:	223a      	movs	r2, #58	; 0x3a
 800184e:	2128      	movs	r1, #40	; 0x28
 8001850:	2000      	movs	r0, #0
 8001852:	f000 fbf6 	bl	8002042 <ST7789_DrawImage>

	  for(int i = 0; i < 9999*4; i++)
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	e007      	b.n	800186c <main+0x9c>
	  {
	  	DisplayRPM(i);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fed9 	bl	8001618 <DisplayRPM>
	  for(int i = 0; i < 9999*4; i++)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3301      	adds	r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f649 423b 	movw	r2, #39995	; 0x9c3b
 8001872:	4293      	cmp	r3, r2
 8001874:	ddf2      	ble.n	800185c <main+0x8c>
	  }
	  DisplayOperatingHour(999999990);
 8001876:	a104      	add	r1, pc, #16	; (adr r1, 8001888 <main+0xb8>)
 8001878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800187c:	f7ff fe78 	bl	8001570 <DisplayOperatingHour>
	  i = 20;
 8001880:	e7c4      	b.n	800180c <main+0x3c>
 8001882:	bf00      	nop
 8001884:	f3af 8000 	nop.w
 8001888:	3b9ac9f6 	.word	0x3b9ac9f6
 800188c:	00000000 	.word	0x00000000
 8001890:	40020800 	.word	0x40020800
 8001894:	20000108 	.word	0x20000108
 8001898:	0800b364 	.word	0x0800b364

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2230      	movs	r2, #48	; 0x30
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fd3e 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <SystemClock_Config+0xc8>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a26      	ldr	r2, [pc, #152]	; (8001964 <SystemClock_Config+0xc8>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <SystemClock_Config+0xc8>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <SystemClock_Config+0xcc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a20      	ldr	r2, [pc, #128]	; (8001968 <SystemClock_Config+0xcc>)
 80018e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <SystemClock_Config+0xcc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f8:	2301      	movs	r3, #1
 80018fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001902:	2302      	movs	r3, #2
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800190c:	2304      	movs	r3, #4
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001910:	2364      	movs	r3, #100	; 0x64
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001914:	2302      	movs	r3, #2
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001918:	2304      	movs	r3, #4
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	4618      	mov	r0, r3
 8001922:	f001 fcb9 	bl	8003298 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800192c:	f000 f8e8 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001930:	230f      	movs	r3, #15
 8001932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001934:	2302      	movs	r3, #2
 8001936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	2103      	movs	r1, #3
 800194c:	4618      	mov	r0, r3
 800194e:	f001 ff1b 	bl	8003788 <HAL_RCC_ClockConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001958:	f000 f8d2 	bl	8001b00 <Error_Handler>
  }
}
 800195c:	bf00      	nop
 800195e:	3750      	adds	r7, #80	; 0x50
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000

0800196c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001972:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <MX_SPI1_Init+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800197c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_SPI1_Init+0x64>)
 800198c:	2202      	movs	r2, #2
 800198e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001992:	2201      	movs	r2, #1
 8001994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019b8:	220a      	movs	r2, #10
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019be:	f002 f8cf 	bl	8003b60 <HAL_SPI_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019c8:	f000 f89a 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000050 	.word	0x20000050
 80019d4:	40013000 	.word	0x40013000

080019d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_DMA_Init+0x3c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <MX_DMA_Init+0x3c>)
 80019e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_DMA_Init+0x3c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	203a      	movs	r0, #58	; 0x3a
 8001a00:	f000 ff05 	bl	800280e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a04:	203a      	movs	r0, #58	; 0x3a
 8001a06:	f000 ff1e 	bl	8002846 <HAL_NVIC_EnableIRQ>

}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a2f      	ldr	r2, [pc, #188]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a28      	ldr	r2, [pc, #160]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a1a      	ldr	r2, [pc, #104]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_GPIO_Init+0xdc>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	4815      	ldr	r0, [pc, #84]	; (8001af8 <MX_GPIO_Init+0xe0>)
 8001aa4:	f001 fbde 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_CS_Pin|ST7789_RST_Pin|ST7789_DC_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2107      	movs	r1, #7
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <MX_GPIO_Init+0xe4>)
 8001aae:	f001 fbd9 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480b      	ldr	r0, [pc, #44]	; (8001af8 <MX_GPIO_Init+0xe0>)
 8001aca:	f001 fa47 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_CS_Pin ST7789_RST_Pin ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin|ST7789_RST_Pin|ST7789_DC_Pin;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_GPIO_Init+0xe4>)
 8001ae6:	f001 fa39 	bl	8002f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020400 	.word	0x40020400

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001b16:	bf00      	nop
	ST7789_DC_Clr();
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <ST7789_WriteCommand+0x30>)
 8001b1e:	f001 fba1 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001b22:	1df9      	adds	r1, r7, #7
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <ST7789_WriteCommand+0x34>)
 8001b2c:	f002 f8a1 	bl	8003c72 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001b30:	bf00      	nop
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	20000050 	.word	0x20000050

08001b44 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001b4e:	bf00      	nop
	ST7789_DC_Set();
 8001b50:	2201      	movs	r2, #1
 8001b52:	2104      	movs	r1, #4
 8001b54:	481b      	ldr	r0, [pc, #108]	; (8001bc4 <ST7789_WriteData+0x80>)
 8001b56:	f001 fb85 	bl	8003264 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001b5a:	e02a      	b.n	8001bb2 <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b62:	4293      	cmp	r3, r2
 8001b64:	bf28      	it	cs
 8001b66:	4613      	movcs	r3, r2
 8001b68:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <ST7789_WriteData+0x84>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d30e      	bcc.n	8001b94 <ST7789_WriteData+0x50>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8001b76:	89fb      	ldrh	r3, [r7, #14]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <ST7789_WriteData+0x88>)
 8001b7e:	f002 f9b5 	bl	8003eec <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8001b82:	bf00      	nop
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <ST7789_WriteData+0x88>)
 8001b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d1f8      	bne.n	8001b84 <ST7789_WriteData+0x40>
 8001b92:	e006      	b.n	8001ba2 <ST7789_WriteData+0x5e>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001b94:	89fa      	ldrh	r2, [r7, #14]
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <ST7789_WriteData+0x88>)
 8001b9e:	f002 f868 	bl	8003c72 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1d1      	bne.n	8001b5c <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 8001bb8:	bf00      	nop
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	20000018 	.word	0x20000018
 8001bcc:	20000050 	.word	0x20000050

08001bd0 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001bda:	bf00      	nop
	ST7789_DC_Set();
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2104      	movs	r1, #4
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <ST7789_WriteSmallData+0x30>)
 8001be2:	f001 fb3f 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001be6:	1df9      	adds	r1, r7, #7
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	2201      	movs	r2, #1
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <ST7789_WriteSmallData+0x34>)
 8001bf0:	f002 f83f 	bl	8003c72 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001bf4:	bf00      	nop
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40020400 	.word	0x40020400
 8001c04:	20000050 	.word	0x20000050

08001c08 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001c12:	2036      	movs	r0, #54	; 0x36
 8001c14:	f7ff ff7a 	bl	8001b0c <ST7789_WriteCommand>
	switch (m) {
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d81a      	bhi.n	8001c54 <ST7789_SetRotation+0x4c>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <ST7789_SetRotation+0x1c>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c3d 	.word	0x08001c3d
 8001c2c:	08001c45 	.word	0x08001c45
 8001c30:	08001c4d 	.word	0x08001c4d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001c34:	20c0      	movs	r0, #192	; 0xc0
 8001c36:	f7ff ffcb 	bl	8001bd0 <ST7789_WriteSmallData>
		break;
 8001c3a:	e00c      	b.n	8001c56 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001c3c:	20a0      	movs	r0, #160	; 0xa0
 8001c3e:	f7ff ffc7 	bl	8001bd0 <ST7789_WriteSmallData>
		break;
 8001c42:	e008      	b.n	8001c56 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff ffc3 	bl	8001bd0 <ST7789_WriteSmallData>
		break;
 8001c4a:	e004      	b.n	8001c56 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001c4c:	2060      	movs	r0, #96	; 0x60
 8001c4e:	f7ff ffbf 	bl	8001bd0 <ST7789_WriteSmallData>
		break;
 8001c52:	e000      	b.n	8001c56 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001c54:	bf00      	nop
	}
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop

08001c60 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	80fb      	strh	r3, [r7, #6]
 8001c72:	4603      	mov	r3, r0
 8001c74:	80bb      	strh	r3, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	807b      	strh	r3, [r7, #2]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001c7e:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	82fb      	strh	r3, [r7, #22]
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001c88:	88bb      	ldrh	r3, [r7, #4]
 8001c8a:	827b      	strh	r3, [r7, #18]
 8001c8c:	883b      	ldrh	r3, [r7, #0]
 8001c8e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001c90:	202a      	movs	r0, #42	; 0x2a
 8001c92:	f7ff ff3b 	bl	8001b0c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001c96:	8afb      	ldrh	r3, [r7, #22]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	733b      	strb	r3, [r7, #12]
 8001ca0:	8afb      	ldrh	r3, [r7, #22]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	737b      	strb	r3, [r7, #13]
 8001ca6:	8abb      	ldrh	r3, [r7, #20]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	73bb      	strb	r3, [r7, #14]
 8001cb0:	8abb      	ldrh	r3, [r7, #20]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	2104      	movs	r1, #4
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff41 	bl	8001b44 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001cc2:	202b      	movs	r0, #43	; 0x2b
 8001cc4:	f7ff ff22 	bl	8001b0c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001cc8:	8a7b      	ldrh	r3, [r7, #18]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	723b      	strb	r3, [r7, #8]
 8001cd2:	8a7b      	ldrh	r3, [r7, #18]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	727b      	strb	r3, [r7, #9]
 8001cd8:	8a3b      	ldrh	r3, [r7, #16]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	72bb      	strb	r3, [r7, #10]
 8001ce2:	8a3b      	ldrh	r3, [r7, #16]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2104      	movs	r1, #4
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff28 	bl	8001b44 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001cf4:	202c      	movs	r0, #44	; 0x2c
 8001cf6:	f7ff ff09 	bl	8001b0c <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001cfa:	bf00      	nop
}
 8001cfc:	bf00      	nop
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}

08001d04 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b08b      	sub	sp, #44	; 0x2c
 8001d08:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8001d0a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001d0e:	2100      	movs	r1, #0
 8001d10:	484b      	ldr	r0, [pc, #300]	; (8001e40 <ST7789_Init+0x13c>)
 8001d12:	f002 fb0b 	bl	800432c <memset>
	#endif
	HAL_Delay(25);
 8001d16:	2019      	movs	r0, #25
 8001d18:	f000 fc7a 	bl	8002610 <HAL_Delay>
    ST7789_RST_Clr();
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4848      	ldr	r0, [pc, #288]	; (8001e44 <ST7789_Init+0x140>)
 8001d22:	f001 fa9f 	bl	8003264 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8001d26:	2019      	movs	r0, #25
 8001d28:	f000 fc72 	bl	8002610 <HAL_Delay>
    ST7789_RST_Set();
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4844      	ldr	r0, [pc, #272]	; (8001e44 <ST7789_Init+0x140>)
 8001d32:	f001 fa97 	bl	8003264 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001d36:	2032      	movs	r0, #50	; 0x32
 8001d38:	f000 fc6a 	bl	8002610 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001d3c:	203a      	movs	r0, #58	; 0x3a
 8001d3e:	f7ff fee5 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001d42:	2055      	movs	r0, #85	; 0x55
 8001d44:	f7ff ff44 	bl	8001bd0 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001d48:	20b2      	movs	r0, #178	; 0xb2
 8001d4a:	f7ff fedf 	bl	8001b0c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001d4e:	4a3e      	ldr	r2, [pc, #248]	; (8001e48 <ST7789_Init+0x144>)
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d58:	6018      	str	r0, [r3, #0]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	2105      	movs	r1, #5
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff feed 	bl	8001b44 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f7ff ff4c 	bl	8001c08 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001d70:	20b7      	movs	r0, #183	; 0xb7
 8001d72:	f7ff fecb 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001d76:	2035      	movs	r0, #53	; 0x35
 8001d78:	f7ff ff2a 	bl	8001bd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001d7c:	20bb      	movs	r0, #187	; 0xbb
 8001d7e:	f7ff fec5 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001d82:	2019      	movs	r0, #25
 8001d84:	f7ff ff24 	bl	8001bd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001d88:	20c0      	movs	r0, #192	; 0xc0
 8001d8a:	f7ff febf 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001d8e:	202c      	movs	r0, #44	; 0x2c
 8001d90:	f7ff ff1e 	bl	8001bd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001d94:	20c2      	movs	r0, #194	; 0xc2
 8001d96:	f7ff feb9 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff ff18 	bl	8001bd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001da0:	20c3      	movs	r0, #195	; 0xc3
 8001da2:	f7ff feb3 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001da6:	2012      	movs	r0, #18
 8001da8:	f7ff ff12 	bl	8001bd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001dac:	20c4      	movs	r0, #196	; 0xc4
 8001dae:	f7ff fead 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001db2:	2020      	movs	r0, #32
 8001db4:	f7ff ff0c 	bl	8001bd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001db8:	20c6      	movs	r0, #198	; 0xc6
 8001dba:	f7ff fea7 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001dbe:	200f      	movs	r0, #15
 8001dc0:	f7ff ff06 	bl	8001bd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001dc4:	20d0      	movs	r0, #208	; 0xd0
 8001dc6:	f7ff fea1 	bl	8001b0c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001dca:	20a4      	movs	r0, #164	; 0xa4
 8001dcc:	f7ff ff00 	bl	8001bd0 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001dd0:	20a1      	movs	r0, #161	; 0xa1
 8001dd2:	f7ff fefd 	bl	8001bd0 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001dd6:	20e0      	movs	r0, #224	; 0xe0
 8001dd8:	f7ff fe98 	bl	8001b0c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <ST7789_Init+0x148>)
 8001dde:	f107 0410 	add.w	r4, r7, #16
 8001de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de4:	c407      	stmia	r4!, {r0, r1, r2}
 8001de6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	210e      	movs	r1, #14
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fea8 	bl	8001b44 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001df4:	20e1      	movs	r0, #225	; 0xe1
 8001df6:	f7ff fe89 	bl	8001b0c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <ST7789_Init+0x14c>)
 8001dfc:	463c      	mov	r4, r7
 8001dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e00:	c407      	stmia	r4!, {r0, r1, r2}
 8001e02:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001e04:	463b      	mov	r3, r7
 8001e06:	210e      	movs	r1, #14
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe9b 	bl	8001b44 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001e0e:	2021      	movs	r0, #33	; 0x21
 8001e10:	f7ff fe7c 	bl	8001b0c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001e14:	2011      	movs	r0, #17
 8001e16:	f7ff fe79 	bl	8001b0c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001e1a:	2013      	movs	r0, #19
 8001e1c:	f7ff fe76 	bl	8001b0c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001e20:	2029      	movs	r0, #41	; 0x29
 8001e22:	f7ff fe73 	bl	8001b0c <ST7789_WriteCommand>

	HAL_Delay(50);
 8001e26:	2032      	movs	r0, #50	; 0x32
 8001e28:	f000 fbf2 	bl	8002610 <HAL_Delay>
	ST7789_InvertColors(0);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f000 f94e 	bl	80020ce <ST7789_InvertColors>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f80e 	bl	8001e54 <ST7789_Fill_Color>
}
 8001e38:	bf00      	nop
 8001e3a:	372c      	adds	r7, #44	; 0x2c
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	20000110 	.word	0x20000110
 8001e44:	40020400 	.word	0x40020400
 8001e48:	080044f8 	.word	0x080044f8
 8001e4c:	08004500 	.word	0x08004500
 8001e50:	08004510 	.word	0x08004510

08001e54 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001e5e:	23ef      	movs	r3, #239	; 0xef
 8001e60:	f240 123f 	movw	r2, #319	; 0x13f
 8001e64:	2100      	movs	r1, #0
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff fefa 	bl	8001c60 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001e6c:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	81fb      	strh	r3, [r7, #14]
 8001e72:	e024      	b.n	8001ebe <ST7789_Fill_Color+0x6a>
		{
//			memset(disp_buf, color, sizeof(disp_buf));
			for(uint16_t j = 0; j < sizeof(disp_buf); j++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	81bb      	strh	r3, [r7, #12]
 8001e78:	e015      	b.n	8001ea6 <ST7789_Fill_Color+0x52>
			{
				(j%2) ? (disp_buf[j] = color&0xFF) : (disp_buf[j] = color>>8);
 8001e7a:	89bb      	ldrh	r3, [r7, #12]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <ST7789_Fill_Color+0x3e>
 8001e86:	89bb      	ldrh	r3, [r7, #12]
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	b2d1      	uxtb	r1, r2
 8001e8c:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <ST7789_Fill_Color+0x7c>)
 8001e8e:	54d1      	strb	r1, [r2, r3]
 8001e90:	e006      	b.n	8001ea0 <ST7789_Fill_Color+0x4c>
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	89bb      	ldrh	r3, [r7, #12]
 8001e9a:	b2d1      	uxtb	r1, r2
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <ST7789_Fill_Color+0x7c>)
 8001e9e:	54d1      	strb	r1, [r2, r3]
			for(uint16_t j = 0; j < sizeof(disp_buf); j++)
 8001ea0:	89bb      	ldrh	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	81bb      	strh	r3, [r7, #12]
 8001ea6:	89bb      	ldrh	r3, [r7, #12]
 8001ea8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001eac:	d3e5      	bcc.n	8001e7a <ST7789_Fill_Color+0x26>
			}
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001eae:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8001eb2:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <ST7789_Fill_Color+0x7c>)
 8001eb4:	f7ff fe46 	bl	8001b44 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	81fb      	strh	r3, [r7, #14]
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ec2:	d9d7      	bls.n	8001e74 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001ec4:	bf00      	nop
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000110 	.word	0x20000110

08001ed4 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	80bb      	strh	r3, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001eec:	d219      	bcs.n	8001f22 <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8001eee:	88bb      	ldrh	r3, [r7, #4]
 8001ef0:	2bef      	cmp	r3, #239	; 0xef
 8001ef2:	d816      	bhi.n	8001f22 <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	88fa      	ldrh	r2, [r7, #6]
 8001ef8:	88b9      	ldrh	r1, [r7, #4]
 8001efa:	88f8      	ldrh	r0, [r7, #6]
 8001efc:	f7ff feb0 	bl	8001c60 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	733b      	strb	r3, [r7, #12]
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8001f10:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2102      	movs	r1, #2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fe13 	bl	8001b44 <ST7789_WriteData>
	ST7789_UnSelect();
 8001f1e:	bf00      	nop
 8001f20:	e000      	b.n	8001f24 <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8001f22:	bf00      	nop
}
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8001f2a:	b590      	push	{r4, r7, lr}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4604      	mov	r4, r0
 8001f32:	4608      	mov	r0, r1
 8001f34:	4611      	mov	r1, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4623      	mov	r3, r4
 8001f3a:	80fb      	strh	r3, [r7, #6]
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	80bb      	strh	r3, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8001f48:	883a      	ldrh	r2, [r7, #0]
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f56:	8879      	ldrh	r1, [r7, #2]
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	1acb      	subs	r3, r1, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bfb8      	it	lt
 8001f60:	425b      	neglt	r3, r3
 8001f62:	429a      	cmp	r2, r3
 8001f64:	bfcc      	ite	gt
 8001f66:	2301      	movgt	r3, #1
 8001f68:	2300      	movle	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8001f6e:	8a7b      	ldrh	r3, [r7, #18]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <ST7789_DrawLine+0x62>
		swap = x0;
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8001f7c:	8a3b      	ldrh	r3, [r7, #16]
 8001f7e:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8001f84:	883b      	ldrh	r3, [r7, #0]
 8001f86:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8001f88:	8a3b      	ldrh	r3, [r7, #16]
 8001f8a:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8001f8c:	88fa      	ldrh	r2, [r7, #6]
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d90b      	bls.n	8001fac <ST7789_DrawLine+0x82>
		swap = x0;
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8001f9c:	8a3b      	ldrh	r3, [r7, #16]
 8001f9e:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8001fa0:	88bb      	ldrh	r3, [r7, #4]
 8001fa2:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8001fa4:	883b      	ldrh	r3, [r7, #0]
 8001fa6:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8001fa8:	8a3b      	ldrh	r3, [r7, #16]
 8001faa:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001fac:	887a      	ldrh	r2, [r7, #2]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8001fb6:	883a      	ldrh	r2, [r7, #0]
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bfb8      	it	lt
 8001fc0:	425b      	neglt	r3, r3
 8001fc2:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8001fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc8:	0fda      	lsrs	r2, r3, #31
 8001fca:	4413      	add	r3, r2
 8001fcc:	105b      	asrs	r3, r3, #1
 8001fce:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8001fd0:	88ba      	ldrh	r2, [r7, #4]
 8001fd2:	883b      	ldrh	r3, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d202      	bcs.n	8001fde <ST7789_DrawLine+0xb4>
        ystep = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	82bb      	strh	r3, [r7, #20]
 8001fdc:	e028      	b.n	8002030 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8001fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe2:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8001fe4:	e024      	b.n	8002030 <ST7789_DrawLine+0x106>
        if (steep) {
 8001fe6:	8a7b      	ldrh	r3, [r7, #18]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8001fec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fee:	88f9      	ldrh	r1, [r7, #6]
 8001ff0:	88bb      	ldrh	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff6e 	bl	8001ed4 <ST7789_DrawPixel>
 8001ff8:	e005      	b.n	8002006 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8001ffa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ffc:	88b9      	ldrh	r1, [r7, #4]
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff67 	bl	8001ed4 <ST7789_DrawPixel>
        }
        err -= dy;
 8002006:	8afa      	ldrh	r2, [r7, #22]
 8002008:	89bb      	ldrh	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8002010:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002014:	2b00      	cmp	r3, #0
 8002016:	da08      	bge.n	800202a <ST7789_DrawLine+0x100>
            y0 += ystep;
 8002018:	8aba      	ldrh	r2, [r7, #20]
 800201a:	88bb      	ldrh	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8002020:	8afa      	ldrh	r2, [r7, #22]
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	4413      	add	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	3301      	adds	r3, #1
 800202e:	80fb      	strh	r3, [r7, #6]
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	429a      	cmp	r2, r3
 8002036:	d9d6      	bls.n	8001fe6 <ST7789_DrawLine+0xbc>
        }
    }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}

08002042 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8002042:	b590      	push	{r4, r7, lr}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	4604      	mov	r4, r0
 800204a:	4608      	mov	r0, r1
 800204c:	4611      	mov	r1, r2
 800204e:	461a      	mov	r2, r3
 8002050:	4623      	mov	r3, r4
 8002052:	80fb      	strh	r3, [r7, #6]
 8002054:	4603      	mov	r3, r0
 8002056:	80bb      	strh	r3, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002066:	d22a      	bcs.n	80020be <ST7789_DrawImage+0x7c>
 8002068:	88bb      	ldrh	r3, [r7, #4]
 800206a:	2bef      	cmp	r3, #239	; 0xef
 800206c:	d827      	bhi.n	80020be <ST7789_DrawImage+0x7c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	4413      	add	r3, r2
 8002074:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002078:	dc23      	bgt.n	80020c2 <ST7789_DrawImage+0x80>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800207a:	88ba      	ldrh	r2, [r7, #4]
 800207c:	883b      	ldrh	r3, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	2bf0      	cmp	r3, #240	; 0xf0
 8002082:	dc20      	bgt.n	80020c6 <ST7789_DrawImage+0x84>
		return;

	ST7789_Select();
 8002084:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8002086:	88fa      	ldrh	r2, [r7, #6]
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	4413      	add	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29c      	uxth	r4, r3
 8002092:	88ba      	ldrh	r2, [r7, #4]
 8002094:	883b      	ldrh	r3, [r7, #0]
 8002096:	4413      	add	r3, r2
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29b      	uxth	r3, r3
 800209e:	88b9      	ldrh	r1, [r7, #4]
 80020a0:	88f8      	ldrh	r0, [r7, #6]
 80020a2:	4622      	mov	r2, r4
 80020a4:	f7ff fddc 	bl	8001c60 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	883a      	ldrh	r2, [r7, #0]
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4619      	mov	r1, r3
 80020b4:	69b8      	ldr	r0, [r7, #24]
 80020b6:	f7ff fd45 	bl	8001b44 <ST7789_WriteData>
	ST7789_UnSelect();
 80020ba:	bf00      	nop
 80020bc:	e004      	b.n	80020c8 <ST7789_DrawImage+0x86>
		return;
 80020be:	bf00      	nop
 80020c0:	e002      	b.n	80020c8 <ST7789_DrawImage+0x86>
		return;
 80020c2:	bf00      	nop
 80020c4:	e000      	b.n	80020c8 <ST7789_DrawImage+0x86>
		return;
 80020c6:	bf00      	nop
}
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}

080020ce <ST7789_InvertColors>:
 * @brief Invert Fullscreen color
 * @param invert -> Whether to invert
 * @return none
 */
void ST7789_InvertColors(uint8_t invert)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80020d8:	bf00      	nop
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <ST7789_InvertColors+0x16>
 80020e0:	2321      	movs	r3, #33	; 0x21
 80020e2:	e000      	b.n	80020e6 <ST7789_InvertColors+0x18>
 80020e4:	2320      	movs	r3, #32
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fd10 	bl	8001b0c <ST7789_WriteCommand>
	ST7789_UnSelect();
 80020ec:	bf00      	nop
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef *font, uint16_t color, uint16_t bgcolor)
{
 80020f6:	b590      	push	{r4, r7, lr}
 80020f8:	b08b      	sub	sp, #44	; 0x2c
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4603      	mov	r3, r0
 8002100:	81fb      	strh	r3, [r7, #14]
 8002102:	460b      	mov	r3, r1
 8002104:	81bb      	strh	r3, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	ST7789_Select();
 800210a:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font->width - 1, y + font->height - 1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b29a      	uxth	r2, r3
 8002112:	89fb      	ldrh	r3, [r7, #14]
 8002114:	4413      	add	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29c      	uxth	r4, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	b29a      	uxth	r2, r3
 8002122:	89bb      	ldrh	r3, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	89b9      	ldrh	r1, [r7, #12]
 800212e:	89f8      	ldrh	r0, [r7, #14]
 8002130:	4622      	mov	r2, r4
 8002132:	f7ff fd95 	bl	8001c60 <ST7789_SetAddressWindow>

	for (i = 0; i < font->height; i++) {
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	e042      	b.n	80021c2 <ST7789_WriteChar+0xcc>
		b = font->data[(ch - 32) * font->height + i];
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	3b20      	subs	r3, #32
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	7849      	ldrb	r1, [r1, #1]
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4619      	mov	r1, r3
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	440b      	add	r3, r1
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	61fb      	str	r3, [r7, #28]
		for (j = 0; j < font->width; j++) {
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	e027      	b.n	80021b0 <ST7789_WriteChar+0xba>
			if ((b << j) & 0x8000) {
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00e      	beq.n	800218e <ST7789_WriteChar+0x98>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002170:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	b29b      	uxth	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	763b      	strb	r3, [r7, #24]
 800217a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800217c:	b2db      	uxtb	r3, r3
 800217e:	767b      	strb	r3, [r7, #25]
				ST7789_WriteData(data, sizeof(data));
 8002180:	f107 0318 	add.w	r3, r7, #24
 8002184:	2102      	movs	r1, #2
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fcdc 	bl	8001b44 <ST7789_WriteData>
 800218c:	e00d      	b.n	80021aa <ST7789_WriteChar+0xb4>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 800218e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	753b      	strb	r3, [r7, #20]
 8002198:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800219a:	b2db      	uxtb	r3, r3
 800219c:	757b      	strb	r3, [r7, #21]
				ST7789_WriteData(data, sizeof(data));
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fccd 	bl	8001b44 <ST7789_WriteData>
		for (j = 0; j < font->width; j++) {
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	3301      	adds	r3, #1
 80021ae:	623b      	str	r3, [r7, #32]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d3d1      	bcc.n	8002160 <ST7789_WriteChar+0x6a>
	for (i = 0; i < font->height; i++) {
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	3301      	adds	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	461a      	mov	r2, r3
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d3b6      	bcc.n	800213c <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 80021ce:	bf00      	nop
}
 80021d0:	bf00      	nop
 80021d2:	372c      	adds	r7, #44	; 0x2c
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef *font, uint16_t color, uint16_t bgcolor)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af02      	add	r7, sp, #8
 80021de:	60ba      	str	r2, [r7, #8]
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	4603      	mov	r3, r0
 80021e4:	81fb      	strh	r3, [r7, #14]
 80021e6:	460b      	mov	r3, r1
 80021e8:	81bb      	strh	r3, [r7, #12]
	ST7789_Select();
 80021ea:	bf00      	nop
	while (*str) {
 80021ec:	e030      	b.n	8002250 <ST7789_WriteString+0x78>
		if (x + font->width >= ST7789_WIDTH) {
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80021fa:	db15      	blt.n	8002228 <ST7789_WriteString+0x50>
			x = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	81fb      	strh	r3, [r7, #14]
			y += font->height;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	b29a      	uxth	r2, r3
 8002206:	89bb      	ldrh	r3, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	81bb      	strh	r3, [r7, #12]
			if (y + font->height >= ST7789_HEIGHT) {
 800220c:	89bb      	ldrh	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	7852      	ldrb	r2, [r2, #1]
 8002212:	4413      	add	r3, r2
 8002214:	2bef      	cmp	r3, #239	; 0xef
 8002216:	dc20      	bgt.n	800225a <ST7789_WriteString+0x82>
				break;
			}

			if (*str == ' ') {
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b20      	cmp	r3, #32
 800221e:	d103      	bne.n	8002228 <ST7789_WriteString+0x50>
				// skip spaces in the beginning of the new line
				str++;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3301      	adds	r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
				continue;
 8002226:	e013      	b.n	8002250 <ST7789_WriteString+0x78>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	89b9      	ldrh	r1, [r7, #12]
 800222e:	89f8      	ldrh	r0, [r7, #14]
 8002230:	8bbb      	ldrh	r3, [r7, #28]
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	8b3b      	ldrh	r3, [r7, #24]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f7ff ff5c 	bl	80020f6 <ST7789_WriteChar>
		x += font->width;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b29a      	uxth	r2, r3
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	4413      	add	r3, r2
 8002248:	81fb      	strh	r3, [r7, #14]
		str++;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3301      	adds	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ca      	bne.n	80021ee <ST7789_WriteString+0x16>
 8002258:	e000      	b.n	800225c <ST7789_WriteString+0x84>
				break;
 800225a:	bf00      	nop
	}
	ST7789_UnSelect();
 800225c:	bf00      	nop
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002266:	b590      	push	{r4, r7, lr}
 8002268:	b087      	sub	sp, #28
 800226a:	af02      	add	r7, sp, #8
 800226c:	4604      	mov	r4, r0
 800226e:	4608      	mov	r0, r1
 8002270:	4611      	mov	r1, r2
 8002272:	461a      	mov	r2, r3
 8002274:	4623      	mov	r3, r4
 8002276:	80fb      	strh	r3, [r7, #6]
 8002278:	4603      	mov	r3, r0
 800227a:	80bb      	strh	r3, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002284:	bf00      	nop
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800228c:	d237      	bcs.n	80022fe <ST7789_DrawFilledRectangle+0x98>
 800228e:	88bb      	ldrh	r3, [r7, #4]
 8002290:	2bef      	cmp	r3, #239	; 0xef
 8002292:	d834      	bhi.n	80022fe <ST7789_DrawFilledRectangle+0x98>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	4413      	add	r3, r2
 800229a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800229e:	db03      	blt.n	80022a8 <ST7789_DrawFilledRectangle+0x42>
		w = ST7789_WIDTH - x;
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80022a6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 80022a8:	88ba      	ldrh	r2, [r7, #4]
 80022aa:	883b      	ldrh	r3, [r7, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	2bef      	cmp	r3, #239	; 0xef
 80022b0:	dd03      	ble.n	80022ba <ST7789_DrawFilledRectangle+0x54>
		h = ST7789_HEIGHT - y;
 80022b2:	88bb      	ldrh	r3, [r7, #4]
 80022b4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80022b8:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	e017      	b.n	80022f0 <ST7789_DrawFilledRectangle+0x8a>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	88bb      	ldrh	r3, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	b299      	uxth	r1, r3
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	4413      	add	r3, r2
 80022d0:	b29c      	uxth	r4, r3
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	b29a      	uxth	r2, r3
 80022dc:	88f8      	ldrh	r0, [r7, #6]
 80022de:	8c3b      	ldrh	r3, [r7, #32]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	4622      	mov	r2, r4
 80022e6:	f7ff fe20 	bl	8001f2a <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	3301      	adds	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	883a      	ldrh	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d2e2      	bcs.n	80022c0 <ST7789_DrawFilledRectangle+0x5a>
	}
	ST7789_UnSelect();
 80022fa:	bf00      	nop
 80022fc:	e000      	b.n	8002300 <ST7789_DrawFilledRectangle+0x9a>
		return;
 80022fe:	bf00      	nop
}
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}
	...

08002308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_MspInit+0x4c>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <HAL_MspInit+0x4c>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_MspInit+0x4c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_MspInit+0x4c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_MspInit+0x4c>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a30      	ldr	r2, [pc, #192]	; (8002438 <HAL_SPI_MspInit+0xe0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d159      	bne.n	800242e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_SPI_MspInit+0xe4>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a2e      	ldr	r2, [pc, #184]	; (800243c <HAL_SPI_MspInit+0xe4>)
 8002384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b2c      	ldr	r3, [pc, #176]	; (800243c <HAL_SPI_MspInit+0xe4>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_SPI_MspInit+0xe4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_SPI_MspInit+0xe4>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_SPI_MspInit+0xe4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023b2:	23a0      	movs	r3, #160	; 0xa0
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023c2:	2305      	movs	r3, #5
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	481c      	ldr	r0, [pc, #112]	; (8002440 <HAL_SPI_MspInit+0xe8>)
 80023ce:	f000 fdc5 	bl	8002f5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_SPI_MspInit+0xec>)
 80023d4:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <HAL_SPI_MspInit+0xf0>)
 80023d6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_SPI_MspInit+0xec>)
 80023da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023de:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_SPI_MspInit+0xec>)
 80023e2:	2240      	movs	r2, #64	; 0x40
 80023e4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_SPI_MspInit+0xec>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_SPI_MspInit+0xec>)
 80023ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_SPI_MspInit+0xec>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_SPI_MspInit+0xec>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_SPI_MspInit+0xec>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_SPI_MspInit+0xec>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_SPI_MspInit+0xec>)
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002412:	480c      	ldr	r0, [pc, #48]	; (8002444 <HAL_SPI_MspInit+0xec>)
 8002414:	f000 fa32 	bl	800287c <HAL_DMA_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800241e:	f7ff fb6f 	bl	8001b00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_SPI_MspInit+0xec>)
 8002426:	649a      	str	r2, [r3, #72]	; 0x48
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <HAL_SPI_MspInit+0xec>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3728      	adds	r7, #40	; 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40013000 	.word	0x40013000
 800243c:	40023800 	.word	0x40023800
 8002440:	40020000 	.word	0x40020000
 8002444:	200000a8 	.word	0x200000a8
 8002448:	40026440 	.word	0x40026440

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <NMI_Handler+0x4>

08002452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <MemManage_Handler+0x4>

0800245e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <BusFault_Handler+0x4>

08002464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <UsageFault_Handler+0x4>

0800246a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002498:	f000 f89a 	bl	80025d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA2_Stream2_IRQHandler+0x10>)
 80024a6:	f000 faef 	bl	8002a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200000a8 	.word	0x200000a8

080024b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <SystemInit+0x20>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <SystemInit+0x20>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002510 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024de:	490e      	ldr	r1, [pc, #56]	; (8002518 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024e0:	4a0e      	ldr	r2, [pc, #56]	; (800251c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024f4:	4c0b      	ldr	r4, [pc, #44]	; (8002524 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002502:	f7ff ffd7 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002506:	f001 ff19 	bl	800433c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800250a:	f7ff f961 	bl	80017d0 <main>
  bx  lr    
 800250e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002518:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800251c:	0800d17c 	.word	0x0800d17c
  ldr r2, =_sbss
 8002520:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002524:	20000d94 	.word	0x20000d94

08002528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002528:	e7fe      	b.n	8002528 <ADC_IRQHandler>
	...

0800252c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_Init+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <HAL_Init+0x40>)
 8002536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_Init+0x40>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_Init+0x40>)
 8002542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_Init+0x40>)
 800254e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002554:	2003      	movs	r0, #3
 8002556:	f000 f94f 	bl	80027f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255a:	200f      	movs	r0, #15
 800255c:	f000 f808 	bl	8002570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002560:	f7ff fed2 	bl	8002308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00

08002570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x54>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_InitTick+0x58>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	fbb3 f3f1 	udiv	r3, r3, r1
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f967 	bl	8002862 <HAL_SYSTICK_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00e      	b.n	80025bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d80a      	bhi.n	80025ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f000 f92f 	bl	800280e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_InitTick+0x5c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000001c 	.word	0x2000001c
 80025c8:	20000024 	.word	0x20000024
 80025cc:	20000020 	.word	0x20000020

080025d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x20>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_IncTick+0x24>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_IncTick+0x24>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000024 	.word	0x20000024
 80025f4:	20000d90 	.word	0x20000d90

080025f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return uwTick;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_GetTick+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000d90 	.word	0x20000d90

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff ffee 	bl	80025f8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_Delay+0x44>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffde 	bl	80025f8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000024 	.word	0x20000024

08002658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <__NVIC_SetPriorityGrouping+0x44>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002674:	4013      	ands	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <__NVIC_SetPriorityGrouping+0x44>)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	60d3      	str	r3, [r2, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <__NVIC_GetPriorityGrouping+0x18>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	f003 0307 	and.w	r3, r3, #7
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	db0b      	blt.n	80026e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	4907      	ldr	r1, [pc, #28]	; (80026f4 <__NVIC_EnableIRQ+0x38>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	2001      	movs	r0, #1
 80026de:	fa00 f202 	lsl.w	r2, r0, r2
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000e100 	.word	0xe000e100

080026f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	6039      	str	r1, [r7, #0]
 8002702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002708:	2b00      	cmp	r3, #0
 800270a:	db0a      	blt.n	8002722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	b2da      	uxtb	r2, r3
 8002710:	490c      	ldr	r1, [pc, #48]	; (8002744 <__NVIC_SetPriority+0x4c>)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	0112      	lsls	r2, r2, #4
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	440b      	add	r3, r1
 800271c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002720:	e00a      	b.n	8002738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4908      	ldr	r1, [pc, #32]	; (8002748 <__NVIC_SetPriority+0x50>)
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	3b04      	subs	r3, #4
 8002730:	0112      	lsls	r2, r2, #4
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	440b      	add	r3, r1
 8002736:	761a      	strb	r2, [r3, #24]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000e100 	.word	0xe000e100
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f1c3 0307 	rsb	r3, r3, #7
 8002766:	2b04      	cmp	r3, #4
 8002768:	bf28      	it	cs
 800276a:	2304      	movcs	r3, #4
 800276c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3304      	adds	r3, #4
 8002772:	2b06      	cmp	r3, #6
 8002774:	d902      	bls.n	800277c <NVIC_EncodePriority+0x30>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3b03      	subs	r3, #3
 800277a:	e000      	b.n	800277e <NVIC_EncodePriority+0x32>
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	f04f 32ff 	mov.w	r2, #4294967295
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	401a      	ands	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002794:	f04f 31ff 	mov.w	r1, #4294967295
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	43d9      	mvns	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	4313      	orrs	r3, r2
         );
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c4:	d301      	bcc.n	80027ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00f      	b.n	80027ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <SysTick_Config+0x40>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d2:	210f      	movs	r1, #15
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	f7ff ff8e 	bl	80026f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <SysTick_Config+0x40>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <SysTick_Config+0x40>)
 80027e4:	2207      	movs	r2, #7
 80027e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	e000e010 	.word	0xe000e010

080027f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ff29 	bl	8002658 <__NVIC_SetPriorityGrouping>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002820:	f7ff ff3e 	bl	80026a0 <__NVIC_GetPriorityGrouping>
 8002824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f7ff ff8e 	bl	800274c <NVIC_EncodePriority>
 8002830:	4602      	mov	r2, r0
 8002832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff5d 	bl	80026f8 <__NVIC_SetPriority>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff31 	bl	80026bc <__NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ffa2 	bl	80027b4 <SysTick_Config>
 8002870:	4603      	mov	r3, r0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff feb6 	bl	80025f8 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e099      	b.n	80029cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b8:	e00f      	b.n	80028da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ba:	f7ff fe9d 	bl	80025f8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d908      	bls.n	80028da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2203      	movs	r2, #3
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e078      	b.n	80029cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e8      	bne.n	80028ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_DMA_Init+0x158>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	2b04      	cmp	r3, #4
 8002932:	d107      	bne.n	8002944 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	4313      	orrs	r3, r2
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0307 	bic.w	r3, r3, #7
 800295a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b04      	cmp	r3, #4
 800296c:	d117      	bne.n	800299e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fa6f 	bl	8002e64 <DMA_CheckFifoParam>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800299a:	2301      	movs	r3, #1
 800299c:	e016      	b.n	80029cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa26 	bl	8002df8 <DMA_CalcBaseAndBitshift>
 80029ac:	4603      	mov	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	223f      	movs	r2, #63	; 0x3f
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	f010803f 	.word	0xf010803f

080029d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Start_IT+0x26>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e040      	b.n	8002a80 <HAL_DMA_Start_IT+0xa8>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d12f      	bne.n	8002a72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2202      	movs	r2, #2
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f9b8 	bl	8002d9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	223f      	movs	r2, #63	; 0x3f
 8002a32:	409a      	lsls	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0216 	orr.w	r2, r2, #22
 8002a46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0208 	orr.w	r2, r2, #8
 8002a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e005      	b.n	8002a7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a94:	4b8e      	ldr	r3, [pc, #568]	; (8002cd0 <HAL_DMA_IRQHandler+0x248>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a8e      	ldr	r2, [pc, #568]	; (8002cd4 <HAL_DMA_IRQHandler+0x24c>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01a      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	2201      	movs	r2, #1
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d012      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	2201      	movs	r2, #1
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0202 	orr.w	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	2204      	movs	r2, #4
 8002b30:	409a      	lsls	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b64:	2210      	movs	r2, #16
 8002b66:	409a      	lsls	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d043      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d03c      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	2210      	movs	r2, #16
 8002b84:	409a      	lsls	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d018      	beq.n	8002bca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d108      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d024      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
 8002bb6:	e01f      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01b      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
 8002bc8:	e016      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0208 	bic.w	r2, r2, #8
 8002be6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 808f 	beq.w	8002d28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8087 	beq.w	8002d28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	2220      	movs	r2, #32
 8002c20:	409a      	lsls	r2, r3
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d136      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0216 	bic.w	r2, r2, #22
 8002c40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <HAL_DMA_IRQHandler+0x1da>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0208 	bic.w	r2, r2, #8
 8002c70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c76:	223f      	movs	r2, #63	; 0x3f
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d07e      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
        }
        return;
 8002c9e:	e079      	b.n	8002d94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01d      	beq.n	8002cea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d031      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
 8002ccc:	e02c      	b.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
 8002cce:	bf00      	nop
 8002cd0:	2000001c 	.word	0x2000001c
 8002cd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e01e      	b.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10f      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d032      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d022      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2205      	movs	r2, #5
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d307      	bcc.n	8002d70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f2      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x2cc>
 8002d6e:	e000      	b.n	8002d72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
 8002d92:	e000      	b.n	8002d96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d94:	bf00      	nop
    }
  }
}
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002db8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d108      	bne.n	8002ddc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dda:	e007      	b.n	8002dec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	60da      	str	r2, [r3, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3b10      	subs	r3, #16
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <DMA_CalcBaseAndBitshift+0x64>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <DMA_CalcBaseAndBitshift+0x68>)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d909      	bls.n	8002e3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	659a      	str	r2, [r3, #88]	; 0x58
 8002e38:	e007      	b.n	8002e4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	aaaaaaab 	.word	0xaaaaaaab
 8002e60:	0800d164 	.word	0x0800d164

08002e64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11f      	bne.n	8002ebe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d856      	bhi.n	8002f32 <DMA_CheckFifoParam+0xce>
 8002e84:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <DMA_CheckFifoParam+0x28>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002eaf 	.word	0x08002eaf
 8002e94:	08002e9d 	.word	0x08002e9d
 8002e98:	08002f33 	.word	0x08002f33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d046      	beq.n	8002f36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eac:	e043      	b.n	8002f36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eb6:	d140      	bne.n	8002f3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ebc:	e03d      	b.n	8002f3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec6:	d121      	bne.n	8002f0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d837      	bhi.n	8002f3e <DMA_CheckFifoParam+0xda>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <DMA_CheckFifoParam+0x70>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002eeb 	.word	0x08002eeb
 8002edc:	08002ee5 	.word	0x08002ee5
 8002ee0:	08002efd 	.word	0x08002efd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee8:	e030      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d025      	beq.n	8002f42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efa:	e022      	b.n	8002f42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f04:	d11f      	bne.n	8002f46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f0a:	e01c      	b.n	8002f46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d903      	bls.n	8002f1a <DMA_CheckFifoParam+0xb6>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d003      	beq.n	8002f20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f18:	e018      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1e:	e015      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00e      	beq.n	8002f4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	e00b      	b.n	8002f4a <DMA_CheckFifoParam+0xe6>
      break;
 8002f32:	bf00      	nop
 8002f34:	e00a      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e008      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e006      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e004      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e159      	b.n	800322c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	f040 8148 	bne.w	8003226 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d005      	beq.n	8002fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d130      	bne.n	8003010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 0201 	and.w	r2, r3, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d017      	beq.n	800304c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d123      	bne.n	80030a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	08da      	lsrs	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3208      	adds	r2, #8
 8003060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	69b9      	ldr	r1, [r7, #24]
 800309c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0203 	and.w	r2, r3, #3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a2 	beq.w	8003226 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	4b57      	ldr	r3, [pc, #348]	; (8003244 <HAL_GPIO_Init+0x2e8>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a56      	ldr	r2, [pc, #344]	; (8003244 <HAL_GPIO_Init+0x2e8>)
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b54      	ldr	r3, [pc, #336]	; (8003244 <HAL_GPIO_Init+0x2e8>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030fe:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_GPIO_Init+0x2ec>)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a49      	ldr	r2, [pc, #292]	; (800324c <HAL_GPIO_Init+0x2f0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d019      	beq.n	800315e <HAL_GPIO_Init+0x202>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a48      	ldr	r2, [pc, #288]	; (8003250 <HAL_GPIO_Init+0x2f4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_GPIO_Init+0x1fe>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a47      	ldr	r2, [pc, #284]	; (8003254 <HAL_GPIO_Init+0x2f8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00d      	beq.n	8003156 <HAL_GPIO_Init+0x1fa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a46      	ldr	r2, [pc, #280]	; (8003258 <HAL_GPIO_Init+0x2fc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <HAL_GPIO_Init+0x1f6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a45      	ldr	r2, [pc, #276]	; (800325c <HAL_GPIO_Init+0x300>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_GPIO_Init+0x1f2>
 800314a:	2304      	movs	r3, #4
 800314c:	e008      	b.n	8003160 <HAL_GPIO_Init+0x204>
 800314e:	2307      	movs	r3, #7
 8003150:	e006      	b.n	8003160 <HAL_GPIO_Init+0x204>
 8003152:	2303      	movs	r3, #3
 8003154:	e004      	b.n	8003160 <HAL_GPIO_Init+0x204>
 8003156:	2302      	movs	r3, #2
 8003158:	e002      	b.n	8003160 <HAL_GPIO_Init+0x204>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_GPIO_Init+0x204>
 800315e:	2300      	movs	r3, #0
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	f002 0203 	and.w	r2, r2, #3
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	4093      	lsls	r3, r2
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003170:	4935      	ldr	r1, [pc, #212]	; (8003248 <HAL_GPIO_Init+0x2ec>)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	3302      	adds	r3, #2
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317e:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_GPIO_Init+0x304>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031a2:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <HAL_GPIO_Init+0x304>)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_GPIO_Init+0x304>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031cc:	4a24      	ldr	r2, [pc, #144]	; (8003260 <HAL_GPIO_Init+0x304>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031d2:	4b23      	ldr	r3, [pc, #140]	; (8003260 <HAL_GPIO_Init+0x304>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f6:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_GPIO_Init+0x304>)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_GPIO_Init+0x304>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003220:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <HAL_GPIO_Init+0x304>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3301      	adds	r3, #1
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b0f      	cmp	r3, #15
 8003230:	f67f aea2 	bls.w	8002f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	40013800 	.word	0x40013800
 800324c:	40020000 	.word	0x40020000
 8003250:	40020400 	.word	0x40020400
 8003254:	40020800 	.word	0x40020800
 8003258:	40020c00 	.word	0x40020c00
 800325c:	40021000 	.word	0x40021000
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e267      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d075      	beq.n	80033a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b6:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d00c      	beq.n	80032dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c2:	4b85      	ldr	r3, [pc, #532]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d112      	bne.n	80032f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ce:	4b82      	ldr	r3, [pc, #520]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032da:	d10b      	bne.n	80032f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	4b7e      	ldr	r3, [pc, #504]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d05b      	beq.n	80033a0 <HAL_RCC_OscConfig+0x108>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d157      	bne.n	80033a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e242      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d106      	bne.n	800330c <HAL_RCC_OscConfig+0x74>
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a75      	ldr	r2, [pc, #468]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e01d      	b.n	8003348 <HAL_RCC_OscConfig+0xb0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x98>
 8003316:	4b70      	ldr	r3, [pc, #448]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6f      	ldr	r2, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 800331c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6c      	ldr	r2, [pc, #432]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e00b      	b.n	8003348 <HAL_RCC_OscConfig+0xb0>
 8003330:	4b69      	ldr	r3, [pc, #420]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a68      	ldr	r2, [pc, #416]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7ff f952 	bl	80025f8 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003358:	f7ff f94e 	bl	80025f8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e207      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	4b5b      	ldr	r3, [pc, #364]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0xc0>
 8003376:	e014      	b.n	80033a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7ff f93e 	bl	80025f8 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003380:	f7ff f93a 	bl	80025f8 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e1f3      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	4b51      	ldr	r3, [pc, #324]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0xe8>
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d063      	beq.n	8003476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ae:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d11c      	bne.n	8003400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c6:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d116      	bne.n	8003400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_RCC_OscConfig+0x152>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e1c7      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4937      	ldr	r1, [pc, #220]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	e03a      	b.n	8003476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_OscConfig+0x244>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7ff f8f3 	bl	80025f8 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003416:	f7ff f8ef 	bl	80025f8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e1a8      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4925      	ldr	r1, [pc, #148]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
 8003448:	e015      	b.n	8003476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344a:	4b24      	ldr	r3, [pc, #144]	; (80034dc <HAL_RCC_OscConfig+0x244>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7ff f8d2 	bl	80025f8 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003458:	f7ff f8ce 	bl	80025f8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e187      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d036      	beq.n	80034f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d016      	beq.n	80034b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_RCC_OscConfig+0x248>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7ff f8b2 	bl	80025f8 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003498:	f7ff f8ae 	bl	80025f8 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e167      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_OscConfig+0x240>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x200>
 80034b6:	e01b      	b.n	80034f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_OscConfig+0x248>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034be:	f7ff f89b 	bl	80025f8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	e00e      	b.n	80034e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c6:	f7ff f897 	bl	80025f8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d907      	bls.n	80034e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e150      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	42470000 	.word	0x42470000
 80034e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	4b88      	ldr	r3, [pc, #544]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ea      	bne.n	80034c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8097 	beq.w	800362c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003502:	4b81      	ldr	r3, [pc, #516]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	4b7d      	ldr	r3, [pc, #500]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4a7c      	ldr	r2, [pc, #496]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	6413      	str	r3, [r2, #64]	; 0x40
 800351e:	4b7a      	ldr	r3, [pc, #488]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b77      	ldr	r3, [pc, #476]	; (800370c <HAL_RCC_OscConfig+0x474>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b74      	ldr	r3, [pc, #464]	; (800370c <HAL_RCC_OscConfig+0x474>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a73      	ldr	r2, [pc, #460]	; (800370c <HAL_RCC_OscConfig+0x474>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7ff f857 	bl	80025f8 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7ff f853 	bl	80025f8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e10c      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <HAL_RCC_OscConfig+0x474>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x2ea>
 8003574:	4b64      	ldr	r3, [pc, #400]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	4a63      	ldr	r2, [pc, #396]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6713      	str	r3, [r2, #112]	; 0x70
 8003580:	e01c      	b.n	80035bc <HAL_RCC_OscConfig+0x324>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b05      	cmp	r3, #5
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x30c>
 800358a:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a5e      	ldr	r2, [pc, #376]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
 8003596:	4b5c      	ldr	r3, [pc, #368]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0x324>
 80035a4:	4b58      	ldr	r3, [pc, #352]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a57      	ldr	r2, [pc, #348]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	4b55      	ldr	r3, [pc, #340]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a54      	ldr	r2, [pc, #336]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 80035b6:	f023 0304 	bic.w	r3, r3, #4
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7ff f818 	bl	80025f8 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7ff f814 	bl	80025f8 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e0cb      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e2:	4b49      	ldr	r3, [pc, #292]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ee      	beq.n	80035cc <HAL_RCC_OscConfig+0x334>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f0:	f7ff f802 	bl	80025f8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe fffe 	bl	80025f8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0b5      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1ee      	bne.n	80035f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d105      	bne.n	800362c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003620:	4b39      	ldr	r3, [pc, #228]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	4a38      	ldr	r2, [pc, #224]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a1 	beq.w	8003778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003636:	4b34      	ldr	r3, [pc, #208]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b08      	cmp	r3, #8
 8003640:	d05c      	beq.n	80036fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d141      	bne.n	80036ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b31      	ldr	r3, [pc, #196]	; (8003710 <HAL_RCC_OscConfig+0x478>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe ffd2 	bl	80025f8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is reset */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe ffce 	bl	80025f8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e087      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b27      	ldr	r3, [pc, #156]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	041b      	lsls	r3, r3, #16
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	491b      	ldr	r1, [pc, #108]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x478>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fe ffa7 	bl	80025f8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe ffa3 	bl	80025f8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e05c      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x416>
 80036cc:	e054      	b.n	8003778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_RCC_OscConfig+0x478>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe ff90 	bl	80025f8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe ff8c 	bl	80025f8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e045      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_RCC_OscConfig+0x470>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x444>
 80036fa:	e03d      	b.n	8003778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d107      	bne.n	8003714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e038      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
 8003708:	40023800 	.word	0x40023800
 800370c:	40007000 	.word	0x40007000
 8003710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x4ec>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d028      	beq.n	8003774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d121      	bne.n	8003774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d11a      	bne.n	8003774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800374c:	4293      	cmp	r3, r2
 800374e:	d111      	bne.n	8003774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d107      	bne.n	8003774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800

08003788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0cc      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b68      	ldr	r3, [pc, #416]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d90c      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b63      	ldr	r3, [pc, #396]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0b8      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037dc:	4b59      	ldr	r3, [pc, #356]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a58      	ldr	r2, [pc, #352]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f4:	4b53      	ldr	r3, [pc, #332]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a52      	ldr	r2, [pc, #328]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b50      	ldr	r3, [pc, #320]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	494d      	ldr	r1, [pc, #308]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d044      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d119      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e07f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d003      	beq.n	8003846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003842:	2b03      	cmp	r3, #3
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b3f      	ldr	r3, [pc, #252]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e06f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e067      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b37      	ldr	r3, [pc, #220]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4934      	ldr	r1, [pc, #208]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003878:	f7fe febe 	bl	80025f8 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fe feba 	bl	80025f8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e04f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d20c      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e032      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4916      	ldr	r1, [pc, #88]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	490e      	ldr	r1, [pc, #56]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390e:	f000 f821 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8003912:	4602      	mov	r2, r0
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	490a      	ldr	r1, [pc, #40]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	5ccb      	ldrb	r3, [r1, r3]
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fe1e 	bl	8002570 <HAL_InitTick>

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023c00 	.word	0x40023c00
 8003944:	40023800 	.word	0x40023800
 8003948:	0800d154 	.word	0x0800d154
 800394c:	2000001c 	.word	0x2000001c
 8003950:	20000020 	.word	0x20000020

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003958:	b094      	sub	sp, #80	; 0x50
 800395a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	2300      	movs	r3, #0
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003964:	2300      	movs	r3, #0
 8003966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800396c:	4b79      	ldr	r3, [pc, #484]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b08      	cmp	r3, #8
 8003976:	d00d      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x40>
 8003978:	2b08      	cmp	r3, #8
 800397a:	f200 80e1 	bhi.w	8003b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x34>
 8003982:	2b04      	cmp	r3, #4
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x3a>
 8003986:	e0db      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4b73      	ldr	r3, [pc, #460]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800398a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800398c:	e0db      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800398e:	4b73      	ldr	r3, [pc, #460]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003992:	e0d8      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003994:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800399e:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d063      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039aa:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	2200      	movs	r2, #0
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
 80039c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039c6:	4622      	mov	r2, r4
 80039c8:	462b      	mov	r3, r5
 80039ca:	f04f 0000 	mov.w	r0, #0
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	0159      	lsls	r1, r3, #5
 80039d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d8:	0150      	lsls	r0, r2, #5
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4621      	mov	r1, r4
 80039e0:	1a51      	subs	r1, r2, r1
 80039e2:	6139      	str	r1, [r7, #16]
 80039e4:	4629      	mov	r1, r5
 80039e6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f8:	4659      	mov	r1, fp
 80039fa:	018b      	lsls	r3, r1, #6
 80039fc:	4651      	mov	r1, sl
 80039fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a02:	4651      	mov	r1, sl
 8003a04:	018a      	lsls	r2, r1, #6
 8003a06:	4651      	mov	r1, sl
 8003a08:	ebb2 0801 	subs.w	r8, r2, r1
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a26:	4690      	mov	r8, r2
 8003a28:	4699      	mov	r9, r3
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	eb18 0303 	adds.w	r3, r8, r3
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	462b      	mov	r3, r5
 8003a34:	eb49 0303 	adc.w	r3, r9, r3
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a46:	4629      	mov	r1, r5
 8003a48:	024b      	lsls	r3, r1, #9
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a50:	4621      	mov	r1, r4
 8003a52:	024a      	lsls	r2, r1, #9
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a64:	f7fd f8b4 	bl	8000bd0 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	e058      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a82:	623b      	str	r3, [r7, #32]
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	f04f 0000 	mov.w	r0, #0
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	0159      	lsls	r1, r3, #5
 8003a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a9e:	0150      	lsls	r0, r2, #5
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aaa:	4649      	mov	r1, r9
 8003aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	00eb      	lsls	r3, r5, #3
 8003ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ada:	00e2      	lsls	r2, r4, #3
 8003adc:	4614      	mov	r4, r2
 8003ade:	461d      	mov	r5, r3
 8003ae0:	4643      	mov	r3, r8
 8003ae2:	18e3      	adds	r3, r4, r3
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	eb45 0303 	adc.w	r3, r5, r3
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afa:	4629      	mov	r1, r5
 8003afc:	028b      	lsls	r3, r1, #10
 8003afe:	4621      	mov	r1, r4
 8003b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b04:	4621      	mov	r1, r4
 8003b06:	028a      	lsls	r2, r1, #10
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	61fa      	str	r2, [r7, #28]
 8003b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b18:	f7fd f85a 	bl	8000bd0 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b3e:	e002      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3750      	adds	r7, #80	; 0x50
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	007a1200 	.word	0x007a1200

08003b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e07b      	b.n	8003c6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b82:	d009      	beq.n	8003b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	61da      	str	r2, [r3, #28]
 8003b8a:	e005      	b.n	8003b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fbd0 	bl	8002358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	ea42 0103 	orr.w	r1, r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0104 	and.w	r1, r3, #4
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0210 	and.w	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b088      	sub	sp, #32
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_SPI_Transmit+0x22>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e126      	b.n	8003ee2 <HAL_SPI_Transmit+0x270>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c9c:	f7fe fcac 	bl	80025f8 <HAL_GetTick>
 8003ca0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cb6:	e10b      	b.n	8003ed0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0x52>
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc8:	e102      	b.n	8003ed0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d10:	d10f      	bne.n	8003d32 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d007      	beq.n	8003d50 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d58:	d14b      	bne.n	8003df2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Transmit+0xf6>
 8003d62:	8afb      	ldrh	r3, [r7, #22]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d13e      	bne.n	8003de6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	1c9a      	adds	r2, r3, #2
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d8c:	e02b      	b.n	8003de6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d112      	bne.n	8003dc2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dc0:	e011      	b.n	8003de6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc2:	f7fe fc19 	bl	80025f8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d803      	bhi.n	8003dda <HAL_SPI_Transmit+0x168>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d102      	bne.n	8003de0 <HAL_SPI_Transmit+0x16e>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de4:	e074      	b.n	8003ed0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ce      	bne.n	8003d8e <HAL_SPI_Transmit+0x11c>
 8003df0:	e04c      	b.n	8003e8c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_SPI_Transmit+0x18e>
 8003dfa:	8afb      	ldrh	r3, [r7, #22]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d140      	bne.n	8003e82 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	7812      	ldrb	r2, [r2, #0]
 8003e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e26:	e02c      	b.n	8003e82 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d113      	bne.n	8003e5e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e5c:	e011      	b.n	8003e82 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5e:	f7fe fbcb 	bl	80025f8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d803      	bhi.n	8003e76 <HAL_SPI_Transmit+0x204>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d102      	bne.n	8003e7c <HAL_SPI_Transmit+0x20a>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e80:	e026      	b.n	8003ed0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1cd      	bne.n	8003e28 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	6839      	ldr	r1, [r7, #0]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fa09 	bl	80042a8 <SPI_EndRxTxTransaction>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e000      	b.n	8003ed0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ece:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_SPI_Transmit_DMA+0x20>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e09b      	b.n	8004044 <HAL_SPI_Transmit_DMA+0x158>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
 8003f22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f24:	e089      	b.n	800403a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_SPI_Transmit_DMA+0x46>
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f36:	e080      	b.n	800403a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <HAL_SPI_Transmit_DMA+0x160>)
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fac:	4a28      	ldr	r2, [pc, #160]	; (8004050 <HAL_SPI_Transmit_DMA+0x164>)
 8003fae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb4:	4a27      	ldr	r2, [pc, #156]	; (8004054 <HAL_SPI_Transmit_DMA+0x168>)
 8003fb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	4619      	mov	r1, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003fd8:	f7fe fcfe 	bl	80029d8 <HAL_DMA_Start_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00c      	beq.n	8003ffc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f043 0210 	orr.w	r2, r3, #16
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003ffa:	e01e      	b.n	800403a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d007      	beq.n	800401a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004018:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0220 	orr.w	r2, r2, #32
 8004028:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0202 	orr.w	r2, r2, #2
 8004038:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	0800413d 	.word	0x0800413d
 8004050:	08004095 	.word	0x08004095
 8004054:	08004159 	.word	0x08004159

08004058 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040a2:	f7fe faa9 	bl	80025f8 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b6:	d03b      	beq.n	8004130 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0220 	bic.w	r2, r2, #32
 80040c6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0202 	bic.w	r2, r2, #2
 80040d6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	2164      	movs	r1, #100	; 0x64
 80040dc:	6978      	ldr	r0, [r7, #20]
 80040de:	f000 f8e3 	bl	80042a8 <SPI_EndRxTxTransaction>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2200      	movs	r2, #0
 8004116:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004128:	6978      	ldr	r0, [r7, #20]
 800412a:	f7ff ffa9 	bl	8004080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800412e:	e002      	b.n	8004136 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004130:	6978      	ldr	r0, [r7, #20]
 8004132:	f7ff ff91 	bl	8004058 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff8e 	bl	800406c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0203 	bic.w	r2, r2, #3
 8004174:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f043 0210 	orr.w	r2, r3, #16
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff ff78 	bl	8004080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a8:	f7fe fa26 	bl	80025f8 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	4413      	add	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b8:	f7fe fa1e 	bl	80025f8 <HAL_GetTick>
 80041bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041be:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	015b      	lsls	r3, r3, #5
 80041c4:	0d1b      	lsrs	r3, r3, #20
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ce:	e054      	b.n	800427a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d050      	beq.n	800427a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d8:	f7fe fa0e 	bl	80025f8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d902      	bls.n	80041ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d13d      	bne.n	800426a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004206:	d111      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004210:	d004      	beq.n	800421c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	d107      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004234:	d10f      	bne.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e017      	b.n	800429a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3b01      	subs	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	429a      	cmp	r2, r3
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	429a      	cmp	r2, r3
 8004296:	d19b      	bne.n	80041d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	2000001c 	.word	0x2000001c

080042a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <SPI_EndRxTxTransaction+0x7c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <SPI_EndRxTxTransaction+0x80>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	0d5b      	lsrs	r3, r3, #21
 80042c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d2:	d112      	bne.n	80042fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2200      	movs	r2, #0
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff ff5a 	bl	8004198 <SPI_WaitFlagStateUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3b01      	subs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	d0f2      	beq.n	80042fa <SPI_EndRxTxTransaction+0x52>
 8004314:	e000      	b.n	8004318 <SPI_EndRxTxTransaction+0x70>
        break;
 8004316:	bf00      	nop
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	2000001c 	.word	0x2000001c
 8004328:	165e9f81 	.word	0x165e9f81

0800432c <memset>:
 800432c:	4402      	add	r2, r0
 800432e:	4603      	mov	r3, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <__libc_init_array>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	4d0d      	ldr	r5, [pc, #52]	; (8004374 <__libc_init_array+0x38>)
 8004340:	4c0d      	ldr	r4, [pc, #52]	; (8004378 <__libc_init_array+0x3c>)
 8004342:	1b64      	subs	r4, r4, r5
 8004344:	10a4      	asrs	r4, r4, #2
 8004346:	2600      	movs	r6, #0
 8004348:	42a6      	cmp	r6, r4
 800434a:	d109      	bne.n	8004360 <__libc_init_array+0x24>
 800434c:	4d0b      	ldr	r5, [pc, #44]	; (800437c <__libc_init_array+0x40>)
 800434e:	4c0c      	ldr	r4, [pc, #48]	; (8004380 <__libc_init_array+0x44>)
 8004350:	f000 f818 	bl	8004384 <_init>
 8004354:	1b64      	subs	r4, r4, r5
 8004356:	10a4      	asrs	r4, r4, #2
 8004358:	2600      	movs	r6, #0
 800435a:	42a6      	cmp	r6, r4
 800435c:	d105      	bne.n	800436a <__libc_init_array+0x2e>
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	f855 3b04 	ldr.w	r3, [r5], #4
 8004364:	4798      	blx	r3
 8004366:	3601      	adds	r6, #1
 8004368:	e7ee      	b.n	8004348 <__libc_init_array+0xc>
 800436a:	f855 3b04 	ldr.w	r3, [r5], #4
 800436e:	4798      	blx	r3
 8004370:	3601      	adds	r6, #1
 8004372:	e7f2      	b.n	800435a <__libc_init_array+0x1e>
 8004374:	0800d174 	.word	0x0800d174
 8004378:	0800d174 	.word	0x0800d174
 800437c:	0800d174 	.word	0x0800d174
 8004380:	0800d178 	.word	0x0800d178

08004384 <_init>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr

08004390 <_fini>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr
